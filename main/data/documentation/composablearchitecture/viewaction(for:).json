{"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending"],"generated":true,"anchor":"View-actions","title":"View actions"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"text":"(extension, conformances: ","kind":"text"},{"text":"ViewActionSending","preciseIdentifier":"s:22ComposableArchitecture17ViewActionSendingP","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending"},{"kind":"text","text":") "},{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ViewAction","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":" : "},{"text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"kind":"text","text":", "},{"text":"R","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10ViewActionP","text":"ViewAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to restrict what actions can be sent from the view you can use this macro along with the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"type":"text","text":" protocol. You start by conforming your reducer’s "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"text":" protocol, and moving view-specific actions to its own inner enum:","type":"text"}]},{"syntax":"swift","code":["@Reducer","struct Feature {","  struct State { \/* ... *\/ }","  enum Action: ViewAction {","    case loginResponse(Bool)","    case view(View)","","    enum View {","      case loginButtonTapped","    }","  }","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then you can apply the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)","type":"reference"},{"text":" macro to your view by specifying the type of the","type":"text"},{"type":"text","text":" "},{"text":"reducer that powers the view:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@ViewAction(for: Feature.self)","struct FeatureView: View {","  let store: StoreOf<Feature>","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"The macro does two things:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"It adds a "},{"type":"codeVoice","code":"send"},{"text":" method to the view that you can use instead of ","type":"text"},{"type":"codeVoice","code":"store.send"},{"text":". This allows you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to send view actions more simply, without wrapping the action in "},{"code":".view(…)","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":[" Button(\"Login\") {","-  store.send(.view(.loginButtonTapped))","+  send(.loginButtonTapped)"," }"],"type":"codeListing","syntax":"diff"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"It creates warning diagnostics if you try sending actions through ","type":"text"},{"type":"codeVoice","code":"store.send"},{"text":" rather than","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"send"},{"type":"text","text":" method on the view:"}]},{"code":["Button(\"Login\") {","  store.send(.view(.loginButtonTapped))","\/\/┬─────────","\/\/╰─ ⚠️ Do not use 'store.send' directly when using '@ViewAction'","}"],"type":"codeListing","syntax":"swift"}]}],"type":"unorderedList"}],"kind":"content"}],"kind":"symbol","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)","interfaceLanguage":"swift"},"metadata":{"externalID":"s:22ComposableArchitecture10ViewAction3foryxm_tcAA7ReducerRzAaB0D0Rpzlufm","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"macro","roleHeading":"Macro","title":"ViewAction(for:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ViewAction","kind":"identifier"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"for"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":".Type)","kind":"text"}],"role":"symbol"},"abstract":[{"type":"text","text":"Provides a view with access to a feature’s "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"type":"text","text":"s."}],"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/viewaction(for:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"url":"\/documentation\/composablearchitecture\/effect","title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"kind":"symbol","role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewAction"}],"navigatorTitle":[{"text":"ViewAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewaction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","title":"ViewAction","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Defines the actions that can be sent from a view."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction(for:)":{"title":"ViewAction(for:)","abstract":[{"type":"text","text":"Provides a view with access to a feature’s "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","isActive":true},{"text":"s.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/viewaction(for:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewAction"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":".Type)"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","title":"Reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"required":true,"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","url":"\/documentation\/composablearchitecture\/reducer\/state","title":"State","kind":"symbol","role":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","role":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewActionSending":{"role":"symbol","title":"ViewActionSending","type":"topic","url":"\/documentation\/composablearchitecture\/viewactionsending","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending","abstract":[{"type":"text","text":"A type that represents a view with a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" that can send "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"text":"s.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewActionSending"}],"navigatorTitle":[{"kind":"identifier","text":"ViewActionSending"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" of the reducer to change"},{"text":" ","type":"text"},{"text":"and\/or kick off a side ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":" that can communicate with the outside world.","type":"text"}],"required":true,"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","url":"\/documentation\/composablearchitecture\/reducer\/action","title":"Action","kind":"symbol","role":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Action","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"url":"\/documentation\/composablearchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"}}}