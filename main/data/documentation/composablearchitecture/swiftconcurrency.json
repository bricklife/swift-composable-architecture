{"metadata":{"role":"article","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article","title":"Adopting Swift concurrency"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","sections":[],"abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored"},{"text":" ","type":"text"},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"text":" ","type":"text"},{"text":"you will need to know how to prove to the compiler that your types are safe to use concurrently.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"There primary way to create an ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":" in the library is via","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":". It takes a "},{"type":"codeVoice","code":"@Sendable"},{"text":", asynchronous closure,","type":"text"},{"text":" ","type":"text"},{"text":"which restricts the types of closures you can use for your effects. In particular, the closure can","type":"text"},{"text":" ","type":"text"},{"text":"only capture ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" variables that are bound with ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":". Mutable variables and non-"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" "},{"type":"text","text":"types are simply not allowed to be passed to "},{"code":"@Sendable","type":"codeVoice"},{"text":" closures.","type":"text"}]},{"inlineContent":[{"text":"There are two primary ways you will run into this restriction when building a feature in the","type":"text"},{"type":"text","text":" "},{"text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from","type":"text"},{"type":"text","text":" "},{"text":"within an effect.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Accessing-state-in-an-effect","text":"Accessing state in an effect","type":"heading"},{"inlineContent":[{"type":"text","text":"Reducers are executed with a mutable, "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" state variable, and such variables cannot be accessed"},{"type":"text","text":" "},{"text":"from within ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":" closures:"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        return .run { send in","          try await Task.sleep(for: .seconds(1))","          await send(.delayed(state.count))","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","          \/\/    not allowed in concurrently-executing code","        }","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"To work around this you must explicitly capture the state as an immutable value for the scope of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"closure:"}],"type":"paragraph"},{"code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can also capture just the minimal parts of the state you need for the effect by binding a new"},{"text":" ","type":"text"},{"type":"text","text":"variable name for the capture:"}],"type":"paragraph"},{"code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(count))  \/\/ ✅","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Accessing dependencies in an effect","anchor":"Accessing-dependencies-in-an-effect","level":3},{"type":"paragraph","inlineContent":[{"text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with","type":"text"},{"type":"text","text":" "},{"text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchronous and concurrent contexts, and so must be "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If your dependency is not sendable, you will be notified at the time of registering it with the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"library. In particular, when extending "},{"code":"DependencyValues","type":"codeVoice"},{"type":"text","text":" to provide the computed property:"}]},{"code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"FactClient","type":"codeVoice"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", for whatever reason, you will get a warning in the "},{"code":"get","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"set"},{"type":"text","text":" lines:"}]},{"syntax":null,"code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To fix this you need to make each dependency "},{"type":"codeVoice","code":"Sendable"},{"text":". This usually just means making sure","type":"text"},{"type":"text","text":" "},{"text":"that the interface type only holds onto ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" data, and in particular, any closure-based"},{"text":" ","type":"text"},{"type":"text","text":"endpoints should be annotated as "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"],"type":"codeListing"},{"inlineContent":[{"text":"This will restrict the kinds of closures that can be used when constructing ","type":"text"},{"type":"codeVoice","code":"FactClient"},{"text":" values, thus","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"making the entire "},{"code":"FactClient","type":"codeVoice"},{"type":"text","text":" sendable itself."}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"seeAlsoSections":[{"anchor":"Integrations","title":"Integrations","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","type":"topic","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"title":"UIKit Integration","url":"\/documentation\/composablearchitecture\/uikit","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","type":"topic","abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"text":" ","type":"text"},{"type":"text","text":"as well as the caveats of using the backported tools."}],"title":"Observation backport","url":"\/documentation\/composablearchitecture\/observationbackport","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"url":"\/documentation\/composablearchitecture\/effect","title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"kind":"symbol","role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"url":"\/documentation\/composablearchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article","role":"collectionGroup","title":"SwiftUI Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"type":"topic","title":"run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": ((any "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)"}}}