{"abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"type":"text","text":" "},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs"},{"type":"text","text":" "},{"text":"observation tools, ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"text":" we have backported those tools to work in iOS 13 and later. Using the","type":"text"},{"type":"text","text":" "},{"text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"aware of."}],"type":"paragraph"},{"anchor":"The-Perception-framework","level":2,"text":"The Perception framework","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture comes with a framework known as Perception, which is our backport of","type":"text"},{"type":"text","text":" "},{"text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the","type":"text"},{"type":"text","text":" "},{"text":"Observation framework there is a corresponding tool in Perception.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, instead of the ","type":"text"},{"code":"@Observable","type":"codeVoice"},{"type":"text","text":" macro, there is the "},{"code":"@Perceptible","type":"codeVoice"},{"type":"text","text":" macro:"}]},{"code":["@Perceptible","class CounterModel {","  var count = 0","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must","type":"text"},{"type":"text","text":" "},{"type":"text","text":"remember to wrap the contents of your view in the "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" view:"}]},{"syntax":"swift","code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will make sure that the view subscribes to any fields accessed in the "},{"type":"codeVoice","code":"@Perceptible"},{"text":" model so","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that changes to those fields invalidate the view and cause it to re-render."}]},{"inlineContent":[{"type":"text","text":"If a field of a "},{"type":"codeVoice","code":"@Percetible"},{"text":" model is accessed in a view while ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" inside"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":", then a runtime warning will be triggered:"}],"type":"paragraph"},{"style":"note","type":"aside","name":"üü£ Runtime Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Perceptible state was accessed but is not being tracked. Track changes to"},{"type":"text","text":" "},{"type":"text","text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack"},{"type":"text","text":" "},{"type":"text","text":"frames displayed to find the line in your view where you are accessing state without being inside"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":".","type":"text"}]},{"level":2,"anchor":"Bindings","text":"Bindings","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to derive bindings from the store (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","isActive":true},{"text":" for more information), then you","type":"text"},{"text":" ","type":"text"},{"text":"would typically use the ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" property wrapper that comes with SwiftUI:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, "},{"type":"codeVoice","code":"@Bindable"},{"text":" is iOS 17+. So, the Perception library comes with a tool that can be used in","type":"text"},{"text":" ","type":"text"},{"text":"its place until you can target iOS 17 and later. You just have to qualify ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" with the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Perception"},{"type":"text","text":" namespace:"}]},{"syntax":"swift","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"type":"codeListing"},{"anchor":"Gotchas","type":"heading","level":2,"text":"Gotchas"},{"type":"paragraph","inlineContent":[{"text":"There are a few gotchas to be aware of when using ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":"."}]},{"level":3,"text":"Lazy view closures","type":"heading","anchor":"Lazy-view-closures"},{"inlineContent":[{"text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and","type":"text"},{"type":"text","text":" "},{"text":"not necessarily in the same stack frames as the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" of the view. For example, the trailing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"closure of "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" is called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"text":" the ","type":"text"},{"type":"codeVoice","code":"body"},{"text":" of the view has been computed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means that even if you wrap the body of the view in "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"]},{"inlineContent":[{"text":"‚Ä¶the access to the row‚Äôs ","type":"text"},{"code":"store.title","type":"codeVoice"},{"type":"text","text":" happens "},{"type":"emphasis","inlineContent":[{"text":"outside","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":", and hence will","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not work and will trigger a runtime warning as described above."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The fix for this is to wrap the content of the trailing closure in another "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Mixing legacy and modern features together","anchor":"Mixing-legacy-and-modern-features-together"},{"inlineContent":[{"type":"text","text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":", and features built in the ‚Äúmodern‚Äù style, using the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference","isActive":true},{"text":" macro. The problems mostly manifest themselves as re-computing view bodies","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what"},{"type":"text","text":" "},{"text":"state changed, and can cause glitches or exacerbate navigation bugs.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","type":"reference","isActive":true},{"text":" for more information about this.","type":"text"}]}]}],"seeAlsoSections":[{"generated":true,"anchor":"Integrations","title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/observationbackport"]}],"kind":"article","metadata":{"roleHeading":"Article","title":"Observation backport","modules":[{"name":"ComposableArchitecture"}],"role":"article"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","type":"topic","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"title":"UIKit Integration","url":"\/documentation\/composablearchitecture\/uikit","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"title":"Incrementally migrating","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","type":"topic","abstract":[],"url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","title":"ObservableState()","abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ViewStore","kind":"identifier"}],"deprecated":true,"title":"ViewStore","url":"\/documentation\/composablearchitecture\/viewstore","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"title":"WithViewStore","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"deprecated":true,"kind":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"url":"\/documentation\/composablearchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"role":"article","kind":"article","abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}],"title":"Working with SwiftUI bindings","url":"\/documentation\/composablearchitecture\/bindings","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article","role":"collectionGroup","title":"SwiftUI Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","type":"topic","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}],"title":"Adopting Swift concurrency","url":"\/documentation\/composablearchitecture\/swiftconcurrency","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","role":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]}}}