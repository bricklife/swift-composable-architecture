{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"project","sections":[{"kind":"hero","chapter":"Essentials","estimatedTimeInMinutes":20,"content":[{"inlineContent":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"type":"paragraph"}],"title":"Your first feature"},{"tasks":[{"title":"Create a reducer","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The fundamental unit that features are built with in the Composable Architecture is the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" macro and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol. A"},{"type":"text","text":" "},{"type":"text","text":"conformance to that protocol represents the logic and behavior for a feature in your"},{"type":"text","text":" "},{"type":"text","text":"application. This includes how to evolve the current state to the next state when an action is"},{"type":"text","text":" "},{"text":"sent into the system, and how effects communicate with the outside world and feed data back","type":"text"},{"text":" ","type":"text"},{"text":"into the system.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"And most importantly, the feature’s core logic and behavior can be built in full isolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with no mention of a SwiftUI view, which makes it easier to develop in isolation, easier"},{"text":" ","type":"text"},{"type":"text","text":"to reuse, and easier to test."}]},{"type":"paragraph","inlineContent":[{"text":"Let’s start by creating a simple reducer that encapsulates the logic of a counter. We will","type":"text"},{"text":" ","type":"text"},{"text":"add more interesting behavior to the feature, but let’s start simple for now.","type":"text"}]}]}],"stepsSection":[{"type":"step","media":null,"code":"01-01-01-code-0001.swift","caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before importing the library you will need to depend on it by "},{"isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","type":"reference"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new Swift file named CounterFeature.swift and import the Composable Architecture.","type":"text"}]}],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define a new struct called ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":", and annotate it with the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" macro.","type":"text"}]}],"media":null,"code":"01-01-01-code-0002.swift","type":"step","caption":[{"name":"Note","style":"note","content":[{"inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"text":" macro does a few things for you, but at","type":"text"},{"type":"text","text":" "},{"text":"this point you only need to know that it extends your type to conform to the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" protocol."}],"type":"paragraph"}],"type":"aside"}],"runtimePreview":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"To conform to ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" you will start with a domain"},{"text":" ","type":"text"},{"text":"modeling exercise. You will create a ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" type that holds the state your feature needs"},{"text":" ","type":"text"},{"text":"to do its job, typically a struct. Then you will create an ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" type that holds all","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the actions the user can perform in the feature, typically an enum."}],"type":"paragraph"}],"media":null,"code":"01-01-01-code-0003.swift","caption":[{"type":"paragraph","inlineContent":[{"text":"Further, if your feature is to be observed by SwiftUI, which is usually the case, you must","type":"text"},{"type":"text","text":" "},{"text":"annotate its state with the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":" macro. It is the"},{"type":"text","text":" "},{"text":"Composable Architecture’s version of ","type":"text"},{"code":"@Observable","type":"codeVoice"},{"type":"text","text":", but tuned to value types."}]}],"type":"step"},{"caption":[{"type":"aside","name":"Tip","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is best to name the "},{"code":"Action","type":"codeVoice"},{"text":" cases after literally what the user does in the UI,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"incrementButtonTapped"},{"text":", rather than what logic you want to perform, such as","type":"text"},{"text":" ","type":"text"},{"code":"incrementCount","type":"codeVoice"},{"text":".","type":"text"}]}]}],"type":"step","media":null,"code":"01-01-01-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"text":"For the purpose of a simple counter feature, the state consists of just a single integer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the current count, and the actions consist of tapping buttons to either increment or"},{"text":" ","type":"text"},{"type":"text","text":"decrement the count."}]}],"runtimePreview":null},{"type":"step","caption":[{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"A reducer is implemented by providing a","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"type":"text","text":" property, and then listing the"},{"type":"text","text":" "},{"text":"reducers inside that you want to compose. Right now we only have one reducer we want to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"run, and so a simple "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","type":"reference"},{"type":"text","text":" is sufficient, but it is more"},{"type":"text","text":" "},{"text":"typical to compose many reducers together, and that will be shown later in the tutorial.","type":"text"}]}],"style":"note","type":"aside"}],"media":null,"content":[{"inlineContent":[{"type":"text","text":"And finally, to finish conforming to "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":", you must implement"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","type":"reference","isActive":true},{"text":" property with a","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","isActive":true,"type":"reference"},{"text":" reducer that evolves the state from its current value to","type":"text"},{"text":" ","type":"text"},{"text":"the next value given a user action, and returns any effects that the feature wants to","type":"text"},{"type":"text","text":" "},{"text":"execute in the outside world. This almost always begins by switching on the incoming action","type":"text"},{"text":" ","type":"text"},{"text":"to determine what logic you need to perform, and the ","type":"text"},{"code":"state","type":"codeVoice"},{"text":" is provided as ","type":"text"},{"code":"inout","type":"codeVoice"},{"type":"text","text":" so you"},{"text":" ","type":"text"},{"type":"text","text":"can perform mutations on it directly."}],"type":"paragraph"}],"runtimePreview":null,"code":"01-01-01-code-0005.swift"},{"runtimePreview":null,"media":null,"type":"step","caption":[],"code":"01-01-01-code-0006.swift","content":[{"inlineContent":[{"type":"text","text":"The logic for this feature is quite simple. We just want to either subtract one or add one"},{"type":"text","text":" "},{"type":"text","text":"to the state’s count. We must also return a value of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference","isActive":true},{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"that represents the effect to be executed in the outside world, but in this case we do not"},{"text":" ","type":"text"},{"text":"need to execute anything. So we can return a special","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","isActive":true},{"type":"text","text":" value to represent we have no effects to"},{"text":" ","type":"text"},{"text":"execute.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to implement a "},{"type":"emphasis","inlineContent":[{"text":"very","type":"text"}]},{"text":" basic feature in the Composable Architecture.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"There is of course a lot more to know about, such as executing effects and feeding data"},{"text":" ","type":"text"},{"text":"back into the system, using dependencies in reducers, composing multiple reducers together,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and a lot more. But we will stop here for this feature right now and move onto the view."}]}],"anchor":"Create-a-reducer"},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Now that we have a simple feature built as a reducer, we need to figure out how to power a","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI view from that feature. This involves a new concept, the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":", which represents the runtime of the feature.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is our personal preference to keep the reducer and view in the same file until it is"},{"text":" ","type":"text"},{"type":"text","text":"untenable, but others prefer to split the types into their own files. For this tutorial"},{"type":"text","text":" "},{"text":"we will continue putting everything in CounterFeature.swift, and we will now import SwiftUI","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and get a basic view into place."}]}],"code":"01-01-02-code-0001.swift","runtimePreview":null,"media":null},{"code":"01-01-02-code-0002.swift","caption":[{"style":"tip","content":[{"inlineContent":[{"text":"The store can be held onto as a ","type":"text"},{"type":"codeVoice","code":"let"},{"text":". Observation of the data in the store happens","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"automatically with the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"text":" macro.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Tip"}],"content":[{"type":"paragraph","inlineContent":[{"text":"The first thing one adds to the view is a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" that is generic","type":"text"},{"text":" ","type":"text"},{"text":"over the reducer we constructed in the previous section. The ","type":"text"},{"type":"codeVoice","code":"Store"},{"text":" represents the runtime","type":"text"},{"type":"text","text":" "},{"text":"of your feature. That is, it is the object that can process actions in order to update","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state, and it can execute effects and feed data from those effects back into the system."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-02-code-0003.swift","runtimePreview":"01-02-image-0003.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Next, we can implement some basic view hierarchy for displaying the count and providing","type":"text"},{"type":"text","text":" "},{"text":"buttons for incrementing and decrementing.","type":"text"}]}],"type":"step","media":null},{"inlineContent":[{"text":"With some basic view scaffolding in place we can now start actually reading state from, and","type":"text"},{"text":" ","type":"text"},{"text":"sending actions to, the ","type":"text"},{"type":"codeVoice","code":"store"},{"text":".","type":"text"}],"type":"paragraph"},{"media":null,"caption":[],"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We can read a property of state directly from the ","type":"text"},{"code":"store","type":"codeVoice"},{"text":" via dynamic member lookup,","type":"text"},{"type":"text","text":" "},{"text":"and we can send actions to the ","type":"text"},{"type":"codeVoice","code":"store"},{"type":"text","text":" via "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)"},{"type":"text","text":"."}]}],"code":"01-01-02-code-0004.swift"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Next we want to actually run the feature. We will start with a preview. To do this we will"},{"text":" ","type":"text"},{"type":"text","text":"construct a "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":", and to do that we need to construct a "},{"type":"codeVoice","code":"StoreOf<CounterFeature>"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Stores can be constructed by providing the initial state you want the feature to begin in,"},{"type":"text","text":" "},{"text":"as well as a trailing closure that specifies the reducer that powers the feature.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"With that done we can run the preview to see that tapping the “+” and “-” buttons does","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"indeed change the visible count in the UI."}],"type":"paragraph"}],"code":"01-01-02-code-0005.swift","media":null,"runtimePreview":"01-02-video-0005.mp4"},{"inlineContent":[{"text":"Before moving onto the next section, let’s quickly show off a super power of the Composable","type":"text"},{"type":"text","text":" "},{"text":"Architecture. Because all of the feature’s logic and behavior are contained in the reducer,","type":"text"},{"type":"text","text":" "},{"text":"we can run the preview with a completely different reducer to alter how it executes.","type":"text"}],"type":"paragraph"},{"caption":[{"name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"Notice that the video demonstrates that tapping the buttons does not cause"},{"type":"text","text":" "},{"text":"the count to increase or decrease. That is because we are using the empty reducer in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"preview."}],"type":"paragraph"}],"type":"aside"}],"type":"step","media":null,"code":"01-01-02-code-0006.swift","runtimePreview":"01-02-video-0006.mp4","content":[{"inlineContent":[{"type":"text","text":"For example, in the preview, comment out the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" reducer and the store will be"},{"type":"text","text":" "},{"text":"given a reducer that performs no state mutations or effects. This allows us to preview the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"design of the feature without worrying about any of its logic or behavior."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Before moving on let’s be sure to bring back the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" reducer in the preview,"},{"type":"text","text":" "},{"type":"text","text":"otherwise it will continue to be inert with our next explorations."}]}],"media":null,"caption":[],"code":"01-01-02-code-0007.swift","type":"step","runtimePreview":null},{"inlineContent":[{"text":"That is all there is to implementing a basic feature in the Composable Architecture. The","type":"text"},{"type":"text","text":" "},{"text":"feature is of course very simple, and doesn’t involve anything interesting like side effects","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(which will be the topic of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"type":"text","text":"), but before any of that let’s see"},{"type":"text","text":" "},{"text":"how to integrate this feature into an application.","type":"text"}],"type":"paragraph"}],"anchor":"Integrating-with-SwiftUI","title":"Integrating with SwiftUI"},{"title":"Integrating into the app","anchor":"Integrating-into-the-app","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have now integrated our Composable Architecture feature into a SwiftUI view and we’ve been"},{"type":"text","text":" "},{"text":"able to run it in the preview. Next we need to figure out how to run the feature in the full","type":"text"},{"type":"text","text":" "},{"type":"text","text":"application by altering its entry point. This will allow us to run the feature in a simulator"},{"type":"text","text":" "},{"type":"text","text":"or on a device."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"runtimePreview":null,"type":"step","caption":[],"code":"01-01-03-code-0001.swift","content":[{"inlineContent":[{"text":"By default the entry point of your application is probably in a file called App.swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and looks something like this code."}],"type":"paragraph"}],"media":null},{"content":[{"inlineContent":[{"text":"We will change the entry point of the application so that it constructs a ","type":"text"},{"type":"codeVoice","code":"CounterView"},{"text":" ","type":"text"},{"type":"text","text":"and provides a store, just as we did in the preview."}],"type":"paragraph"}],"media":null,"code":"01-01-03-code-0002.swift","type":"step","runtimePreview":null,"caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"It is important to note that the "},{"code":"Store","type":"codeVoice"},{"text":" that powers the application should only be created","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a single time. For most applications it should be sufficient to create it directly in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"WindowGroup"},{"text":" at the root of the scene. But, it can also be held as a static variable","type":"text"},{"type":"text","text":" "},{"text":"and then provided in the scene.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null,"runtimePreview":null,"code":"01-01-03-code-0003.swift"},{"inlineContent":[{"type":"text","text":"We can demonstrate another super power of the Composable Architecture. Reducers have a"},{"text":" ","type":"text"},{"type":"text","text":"method called "},{"type":"codeVoice","code":"_printChanges"},{"type":"text","text":" that is similar to a tool that SwiftUI provides. When used it"},{"type":"text","text":" "},{"type":"text","text":"will print every action that the reducer processes to the console, and it will print how the"},{"text":" ","type":"text"},{"text":"state changed after processing the  action. The method will also go through great lengths to","type":"text"},{"type":"text","text":" "},{"text":"collapse the state difference to a compact form. This includes not displaying nested state if","type":"text"},{"text":" ","type":"text"},{"text":"it hasn’t changed, and not showing elements in collections that haven’t changed.","type":"text"}],"type":"paragraph"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the entry point of the application to invoke"},{"type":"text","text":" "},{"type":"codeVoice","code":"_printChanges(_:)"},{"text":" on the reducer.","type":"text"}]}],"type":"step","code":"01-01-03-code-0004.swift","runtimePreview":null},{"caption":[],"media":"01-03-image-0005.jpg","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now when you run the application in the simulator and tap the “+” and “-” buttons a few"},{"text":" ","type":"text"},{"text":"times you should see logs printed to the console showing you exactly what is happening.","type":"text"}]}],"runtimePreview":null,"type":"step","code":null}]}],"kind":"tasks"},{"title":"Adding side effects","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"featuredEyebrow":"Tutorial","kind":"callToAction","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started","isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"}}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"]}],"hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},"metadata":{"category":"The Composable Architecture","categoryPathComponent":"MeetComposableArchitecture","role":"project","title":"Your first feature"},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","title":"ObservableState()","abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"role":"project","estimatedTime":"30min","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","type":"topic","title":"Multiple presentation destinations"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"type":"topic","abstract":[],"title":"Essentials","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","url":"\/tutorials\/meetcomposablearchitecture\/essentials","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"url":"\/documentation\/composablearchitecture\/effect","title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"kind":"symbol","role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]},"01-01-02-code-0004.swift":{"content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"syntax":"swift","type":"file","highlights":[{"line":6},{"line":13},{"line":21}],"fileName":"CounterFeature.swift","fileType":"swift","identifier":"01-01-02-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"title":"Integrating with SwiftUI","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","type":"section","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"section"},"01-01-01-code-0002.swift":{"highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6}],"syntax":"swift","identifier":"01-01-01-code-0002.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  ","}"],"fileType":"swift","fileName":"CounterFeature.swift"},"01-01-02-code-0006.swift":{"content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      \/\/ CounterFeature()","    }","  )","}"],"syntax":"swift","type":"file","highlights":[{"line":4}],"fileName":"CounterFeature.swift","fileType":"swift","identifier":"01-01-02-code-0006.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"title":"Composing features","role":"project","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","type":"topic","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"title":"Integrate views","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"text":"state.","type":"text"}],"kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing effects","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","type":"section","title":"Performing a network request"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","title":"What is a side effect?"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","title":"Reduce","url":"\/documentation\/composablearchitecture\/reduce","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reduce","kind":"identifier"}],"abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"code":"reduce","type":"codeVoice"},{"type":"text","text":" function."}],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Reduce","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","estimatedTime":"20min","title":"Your first feature","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"type":"text","text":" "},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"estimatedTime":"1hr 0min","title":"Testing your feature","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","role":"project","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","type":"topic"},"01-01-01-code-0001.swift":{"highlights":[],"syntax":"swift","identifier":"01-01-01-code-0001.swift","type":"file","content":["import ComposableArchitecture"],"fileType":"swift","fileName":"CounterFeature.swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"title":"Meet the Composable Architecture","role":"overview","url":"\/tutorials\/meetcomposablearchitecture","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","type":"topic","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a","type":"text"},{"text":" ","type":"text"},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"overview"},"01-01-01-code-0004.swift":{"fileName":"CounterFeature.swift","fileType":"swift","highlights":[{"line":7},{"line":11},{"line":12}],"syntax":"swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"],"identifier":"01-01-01-code-0004.swift"},"01-02-video-0006.mp4":{"variants":[{"url":"\/videos\/ComposableArchitecture\/01-02-video-0006.mp4","traits":["1x","light"]}],"poster":null,"alt":null,"identifier":"01-02-video-0006.mp4","type":"video"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","estimatedTime":"30min","title":"Adding side effects","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"role":"project"},"01-03-image-0005.jpg":{"variants":[{"url":"\/images\/ComposableArchitecture\/01-03-image-0005.jpg","traits":["1x","light"]}],"alt":null,"identifier":"01-03-image-0005.jpg","type":"image"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" protocol for a type."}],"role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"url":"\/documentation\/composablearchitecture\/reducer()","kind":"symbol","title":"Reducer()"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"title":"Deriving child stores","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"type":"section","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Controlling dependencies","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","text":"StoreTask","kind":"typeIdentifier"}],"type":"topic","title":"send(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/send(_:)","role":"symbol","abstract":[{"text":"Sends an action to the store.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"kind":"section","role":"pseudoSymbol","type":"section","title":"Composing reducers","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers"},"01-01-03-code-0003.swift":{"highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":12}],"syntax":"swift","identifier":"01-01-03-code-0003.swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","  }","  ","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"fileType":"swift","fileName":"App.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"title":"Delete contacts","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","type":"section","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"text":"able to present ","type":"text"},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"kind":"section"},"01-01-02-code-0003.swift":{"fileName":"CounterFeature.swift","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"syntax":"swift","type":"file","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"0\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"identifier":"01-01-02-code-0003.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"title":"Navigation stacks","role":"project","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","type":"topic","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"project"},"01-01-03-code-0004.swift":{"highlights":[{"line":8}],"syntax":"swift","identifier":"01-01-03-code-0004.swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","      ._printChanges()","  }","  ","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"fileType":"swift","fileName":"App.swift"},"01-01-02-code-0007.swift":{"content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  )","}"],"syntax":"swift","type":"file","highlights":[{"line":4}],"fileName":"CounterFeature.swift","fileType":"swift","identifier":"01-01-02-code-0007.swift"},"01-01-03-code-0002.swift":{"highlights":[{"line":1},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"syntax":"swift","identifier":"01-01-03-code-0002.swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      CounterView(","        store: Store(initialState: CounterFeature.State()) {","          CounterFeature()","        }","      )","    }","  }","}"],"fileType":"swift","fileName":"App.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","type":"section","title":"Adding a tab view"},"01-01-01-code-0003.swift":{"fileName":"CounterFeature.swift","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":12}],"syntax":"swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    ","  }","  ","  enum Action {","    ","  }","}"],"identifier":"01-01-01-code-0003.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"title":"Testing network requests","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","type":"section","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"required":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","text":"Body"}],"url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","title":"body","kind":"symbol","type":"topic","defaultImplementations":2,"role":"symbol","abstract":[{"text":"The content and behavior of a reducer that is composed from other reducers.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"title":"Testing the add contact flow","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","type":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"section"},"01-01-01-code-0006.swift":{"highlights":[{"line":19},{"line":20},{"line":23},{"line":24}],"syntax":"swift","identifier":"01-01-01-code-0006.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"],"fileType":"swift","fileName":"CounterFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"title":"Drill-down to contact detail","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"type":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"title":"Child-to-parent communication","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"type":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"title":"Testing the delete contact flow","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"01-02-image-0003.png":{"variants":[{"url":"\/images\/ComposableArchitecture\/01-02-image-0003.png","traits":["1x","light"]}],"alt":"iOS application showing a text view in the center displaying a 0 and two buttons underneath it, one for decrementing the count and one for incrementing.","identifier":"01-02-image-0003.png","type":"image"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"project","estimatedTime":"30min","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","type":"topic","title":"Your first presentation"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"type":"topic","abstract":[],"title":"Navigation","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","title":"Reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"role":"symbol"},"http://github.com/pointfreeco/swift-composable-architecture#Installation":{"titleInlineContent":[{"type":"text","text":"adding it to your"},{"text":" ","type":"text"},{"type":"text","text":"Xcode project settings or SPM package"}],"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","type":"link","title":"adding it to your Xcode project settings or SPM package"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"title":"Deleting a contact","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"title":"Testing state changes","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","type":"section","title":"Project set up"},"01-01-02-code-0002.swift":{"content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    EmptyView()","  }","}"],"syntax":"swift","type":"file","highlights":[{"line":2},{"line":3}],"fileName":"CounterFeature.swift","fileType":"swift","identifier":"01-01-02-code-0002.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"title":"Create a reducer","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","type":"section","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"kind":"section"},"01-02-video-0005.mp4":{"variants":[{"url":"\/videos\/ComposableArchitecture\/01-02-video-0005.mp4","traits":["1x","light"]}],"poster":null,"alt":null,"identifier":"01-02-video-0005.mp4","type":"video"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","type":"section","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"text":" features.","type":"text"}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"project","estimatedTime":"40min","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","type":"topic","title":"Testing presentation"},"01-01-02-code-0001.swift":{"fileName":"CounterFeature.swift","fileType":"swift","highlights":[],"syntax":"swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","struct CounterView: View {","  var body: some View {","    EmptyView()","  }","}"],"identifier":"01-01-02-code-0001.swift"},"01-01-01-code-0005.swift":{"highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"syntax":"swift","identifier":"01-01-01-code-0005.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        ","      case .incrementButtonTapped:","        ","      }","    }","  }","}"],"fileType":"swift","fileName":"CounterFeature.swift"},"01-01-03-code-0001.swift":{"fileName":"App.swift","fileType":"swift","highlights":[],"syntax":"swift","type":"file","content":["import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      ContentView()","    }","  }","}"],"identifier":"01-01-03-code-0001.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"text":" ","type":"text"},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"none","kind":"identifier"},{"kind":"text","text":": "},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"none","role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/none"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","title":"Integrating into the app"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","type":"section","title":"Contact detail feature"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","role":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"title":"Non-exhaustive testing","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"01-01-02-code-0005.swift":{"highlights":[],"syntax":"swift","identifier":"01-01-02-code-0005.swift","type":"file","content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  )","}"],"fileType":"swift","fileName":"CounterFeature.swift"}}}