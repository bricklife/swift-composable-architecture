{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer"},"variants":[{"paths":["\/tutorials\/composablearchitecture\/implementingtimer"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"estimatedTimeInMinutes":25,"kind":"hero","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"text":" ","type":"text"},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}]}],"title":"Adding a meeting timer","chapter":"Record meeting"},{"tasks":[{"title":"A basic timer","stepsSection":[{"type":"paragraph","inlineContent":[{"text":"In order to start an effect we need an action to kick off the process. One can use either","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI’s "},{"code":"onAppear","type":"codeVoice"},{"type":"text","text":" or "},{"code":"task","type":"codeVoice"},{"text":" view modifiers.","type":"text"}]},{"media":null,"runtimePreview":null,"code":"ImplementingTimer-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add an ","type":"text"},{"code":"onAppear","type":"codeVoice"},{"text":" action to the ","type":"text"},{"type":"codeVoice","code":"RecordMeeting.Action"},{"text":" enum and send it from the view.","type":"text"}]}],"type":"step","caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Be sure to scroll down in the code snippet to see that we are sending the action"},{"type":"text","text":" "},{"type":"text","text":"from the view."}]}],"style":"note","name":"Note","type":"aside"}]},{"caption":[],"code":"ImplementingTimer-01-code-0002.swift","content":[{"inlineContent":[{"type":"text","text":"Add a "},{"code":"body","type":"codeVoice"},{"type":"text","text":" property to the reducer, and stub out a "},{"type":"codeVoice","code":"Reduce"},{"text":" for us to implement the","type":"text"},{"type":"text","text":" "},{"text":"logic and behavior of the feature.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null,"type":"step"},{"inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"onAppear"},{"text":" action we want to start up a long-living effect that represents a timer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Timers can be easily handled using an asynchronous context, and the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","type":"reference","isActive":true},{"type":"text","text":" helper is"},{"text":" ","type":"text"},{"text":"what gives us an asynchronous context to work in.","type":"text"}],"type":"paragraph"},{"runtimePreview":null,"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Return a ","type":"text"},{"code":".run","type":"codeVoice"},{"type":"text","text":" effect from the "},{"type":"codeVoice","code":"onAppear"},{"type":"text","text":" action in order to create an asynchronous"},{"type":"text","text":" "},{"text":"context to perform work in.","type":"text"}]}],"caption":[],"code":"ImplementingTimer-01-code-0003.swift"},{"runtimePreview":null,"media":null,"code":"ImplementingTimer-01-code-0004.swift","content":[{"inlineContent":[{"type":"text","text":"In the asynchronous context perform an infinite "},{"type":"codeVoice","code":"while"},{"text":" loop with a 1 second ","type":"text"},{"code":"Task.sleep","type":"codeVoice"},{"text":" ","type":"text"},{"text":"inside.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step"},{"inlineContent":[{"text":"This is a very crude way to create a timer, but it will suit our needs for the time being.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"After each ","type":"text"},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":" finishes we want to send an action back into the system to let the"},{"type":"text","text":" "},{"text":"feature know the timer ticked, which will allow us to execute additional logic. To do this we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must first add a new action that can be sent from the effect."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"code":"timerTick","type":"codeVoice"},{"type":"text","text":" to the feature’s domain that represents when a second passes in the timer."}]}],"code":"ImplementingTimer-01-code-0005.swift","runtimePreview":null,"type":"step","caption":[],"media":null},{"content":[{"inlineContent":[{"text":"Send the ","type":"text"},{"type":"codeVoice","code":"timerTick"},{"type":"text","text":" action from the effect after the task sleeps for one second."}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"runtimePreview":null,"code":"ImplementingTimer-01-code-0006.swift"},{"inlineContent":[{"text":"We have now effectively created a timer in our feature. After the view appears, the reducer","type":"text"},{"text":" ","type":"text"},{"text":"will receive a ","type":"text"},{"type":"codeVoice","code":"timerTick"},{"type":"text","text":" action every second. And it’s in that action we can start layering"},{"text":" ","type":"text"},{"type":"text","text":"on some of our feature’s logic."}],"type":"paragraph"},{"caption":[],"code":"ImplementingTimer-01-code-0007.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Increment the "},{"code":"secondsElapsed","type":"codeVoice"},{"text":" state when the ","type":"text"},{"type":"codeVoice","code":"timerTick"},{"type":"text","text":" button is tapped."}],"type":"paragraph"}],"runtimePreview":null,"media":null},{"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"When the number of seconds elapsed is a multiple of the number of seconds each attendee"},{"text":" ","type":"text"},{"type":"text","text":"gets, then it is time to go to the next speaker."}],"type":"paragraph"}],"media":null,"code":"ImplementingTimer-01-code-0008.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"When the last speaker has finished their turn, mutate the shared sync-up in state in order","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to insert a new meeting into the collection."}]}],"media":null,"code":"ImplementingTimer-01-code-0009.swift","caption":[{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"We are using the uncontrolled dependencies ","type":"text"},{"code":"Date()","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"UUID()"},{"type":"text","text":" in this code,"},{"text":" ","type":"text"},{"text":"which we have seen in the past can wreak havoc on writing tests. But we will fix these","type":"text"},{"type":"text","text":" "},{"text":"issues a bit later.","type":"text"}],"type":"paragraph"}]}],"type":"step","runtimePreview":null},{"caption":[],"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Further, when the last speaker has finished their turn we will also pop the record meeting","type":"text"},{"text":" ","type":"text"},{"text":"feature off the stack so that we are navigated back to the detail feature. We can do this by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"leveraging the "},{"code":"dismiss","type":"codeVoice"},{"type":"text","text":" effect."}]}],"code":"ImplementingTimer-01-code-0010.swift","runtimePreview":null},{"inlineContent":[{"text":"With just a few lines we have already implemented some quite nuanced logic and behavior in our","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature. We now have a timer running in parallel with the feature, it updates state with each"},{"text":" ","type":"text"},{"type":"text","text":"timer tick, and once we notice a condition is met we save the meeting to the sync-up and pop"},{"text":" ","type":"text"},{"type":"text","text":"the feature off the stack."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s run the feature in the Xcode preview to make sure it works. However, we don’t want to"},{"type":"text","text":" "},{"type":"text","text":"wait for the full sync-up duration to pass just to see how this feature behaves. It would be"},{"text":" ","type":"text"},{"text":"far better if we could stub in a sync-up that has a particularly short duration to make it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"easier to preview. Luckily we can do that easily with the "},{"overridingTitle":"@Shared","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"wrapper."}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Go to the preview at the bottom of the AppFeature.swift file and override the shared","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sync-ups state to provide a sync-up with 3 attendees and that is 6 seconds long. That"},{"text":" ","type":"text"},{"text":"gives each attendee 2 seconds for their turn.","type":"text"}]}],"media":null,"caption":[],"code":"ImplementingTimer-01-code-0011.swift","runtimePreview":null},{"caption":[],"media":"ImplementingTimer-01-video-0012.mov","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the preview, navigate to the “Morning sync”, tap “Start meeting”, and wait 6 seconds"},{"type":"text","text":" "},{"type":"text","text":"to see each attendee get their turn and for the meeting feature to pop off the screen. Also"},{"type":"text","text":" "},{"type":"text","text":"notice that a new meeting has been inserted into the sync-up detail’s view."}]}],"code":null,"type":"step","runtimePreview":null}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Let’s start with getting the very basics of a timer into place. This will be the first time","type":"text"},{"text":" ","type":"text"},{"text":"we have dealt with an effect that emits actions back into the system, as the only other","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"effect dealt with so far was the "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" effect for dismissing a feature."}],"type":"paragraph"}]}],"anchor":"A-basic-timer"},{"title":"Controlling dependencies early","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"We have already accomplished quite a bit with just a small amount of code, but we want to"},{"type":"text","text":" "},{"text":"quickly fix a few problems. Currently we have taken some shortcuts by reaching out to global,","type":"text"},{"type":"text","text":" "},{"text":"uncontrolled dependencies, such as the ","type":"text"},{"code":"Date","type":"codeVoice"},{"type":"text","text":" and "},{"code":"UUID","type":"codeVoice"},{"type":"text","text":" initializer, and even "},{"code":"Task.sleep","type":"codeVoice"},{"text":" ","type":"text"},{"text":"can be thought of as a dependency.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We are not seeing any of the negative sides to using uncontrolled dependencies right now, but"},{"text":" ","type":"text"},{"text":"as soon as we want to write tests, or make our Xcode previews friendlier to use, we will run","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"into problems. So, we are going to do a little bit of upfront work to control our dependencies"},{"type":"text","text":" "},{"type":"text","text":"early on."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Controlling-dependencies-early","stepsSection":[{"inlineContent":[{"text":"Let’s start by controlling the ","type":"text"},{"code":"Date","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" initializers."}],"type":"paragraph"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add the ","type":"text"},{"type":"codeVoice","code":"\\.date.now"},{"text":" and ","type":"text"},{"code":"\\.uuid","type":"codeVoice"},{"text":" dependencies to the feature.","type":"text"}]}],"caption":[],"code":"ImplementingTimer-02-code-0001.swift","runtimePreview":null,"media":null},{"caption":[],"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use these dependencies in the feature rather than reaching out to the uncontrolled"},{"type":"text","text":" "},{"type":"text","text":"dependencies."}]}],"code":"ImplementingTimer-02-code-0002.swift","type":"step"},{"inlineContent":[{"type":"text","text":"The next dependency is a little more subtle, and not something that has been covered in this"},{"type":"text","text":" "},{"text":"tutorial yet. When we used ","type":"text"},{"type":"codeVoice","code":"Task.sleep"},{"text":" directly in our reducer, we unknowingly introduced a","type":"text"},{"type":"text","text":" "},{"text":"pernicious dependency to our feature: the dependency of ","type":"text"},{"inlineContent":[{"text":"time","type":"text"}],"type":"emphasis"},{"text":"!","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This dependency makes it difficult to test things, because you have to literally wait for"},{"text":" ","type":"text"},{"type":"text","text":"time to pass, which can cause your tests to take very long time to run or become"},{"type":"text","text":" "},{"type":"text","text":"non-deterministic. And it can make Xcode previews annoying because you need to wait around"},{"text":" ","type":"text"},{"type":"text","text":"for time to pass to see how your feature reacts."}]},{"inlineContent":[{"text":"The Composable Architecture comes with a tool that allows us to take back control over time","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"rather than letting it control us."}],"type":"paragraph"},{"code":"ImplementingTimer-02-code-0003.swift","caption":[{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"This is a dependency that allows us to control how time flows in our tests and"},{"text":" ","type":"text"},{"text":"previews. We can either use an ","type":"text"},{"code":"ImmediateClock","type":"codeVoice"},{"type":"text","text":" to squash all of time down to a single"},{"type":"text","text":" "},{"text":"instant, or we can use a ","type":"text"},{"code":"TestClock","type":"codeVoice"},{"type":"text","text":" if we want to explicitly advance time to specific"},{"type":"text","text":" "},{"type":"text","text":"moments."}],"type":"paragraph"}]}],"content":[{"inlineContent":[{"text":"Add the ","type":"text"},{"type":"codeVoice","code":"\\.continuousClock"},{"text":" dependency to the feature.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"type":"step"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"clock.timer(interval:)"},{"type":"text","text":" async sequence rather than performing an infinite loop"},{"text":" ","type":"text"},{"type":"text","text":"with a "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":" on the inside."}]}],"type":"step","caption":[],"media":null,"code":"ImplementingTimer-02-code-0004.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to control these dependencies. The application works exactly as it did"},{"type":"text","text":" "},{"text":"before, but we will be in a better position to write tests for the logic of our feature","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that we have done a little bit of upfront work."}]}]},{"stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Let’s start with the logic for the "},{"type":"codeVoice","code":"nextButtonTapped"},{"type":"text","text":" action. We will want to go to the next"},{"type":"text","text":" "},{"text":"speaker ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" advance the "},{"code":"secondsElapsed","type":"codeVoice"},{"text":", but only if we are not on the last speaker.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null,"code":"ImplementingTimer-03-code-0001.swift","caption":[{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have also added some “todos” to the code for where we want to show alerts."}]}]}],"type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the preview to see that you can tap arrow button to skip the current speaker."}]}],"code":null,"runtimePreview":null,"media":null,"type":"step"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to be able to show alerts when the user tries ending the meeting early."}]},{"media":null,"code":"ImplementingTimer-03-code-0002.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Add optional "},{"code":"AlertState","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"RecordMeeting.State","type":"codeVoice"},{"type":"text","text":" that represents whether or not the alert"},{"text":" ","type":"text"},{"type":"text","text":"is currently showing."}],"type":"paragraph"}],"type":"step"},{"runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"text":" case to ","type":"text"},{"type":"codeVoice","code":"RecordMeeting.Action"},{"text":" to","type":"text"},{"type":"text","text":" "},{"text":"represent the actions that can take place in the alert. Right now we will allow confirming","type":"text"},{"type":"text","text":" "},{"text":"the user wants to end the meeting early, but they can further save the meeting or discard","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it."}]}],"media":null,"code":"ImplementingTimer-03-code-0003.swift"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:fileID:filePath:line:column:)-3ux09","isActive":true},{"text":" ","type":"text"},{"text":"reducer method to integrate the alert’s logic in your reducer.","type":"text"}]}],"media":null,"code":"ImplementingTimer-03-code-0004.swift","type":"step","runtimePreview":null},{"type":"step","runtimePreview":null,"media":null,"code":"ImplementingTimer-03-code-0005.swift","caption":[{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"Look towards the bottom of the "},{"type":"codeVoice","code":"RecordMeetingView"},{"type":"text","text":" to find the "},{"type":"codeVoice","code":"alert"},{"text":" view","type":"text"},{"text":" ","type":"text"},{"text":"modifier.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use SwiftUI’s "},{"type":"codeVoice","code":"SwiftUI\/View\/alert(_:)"},{"text":" view modifier to drive the presentation and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dismissal of the alert from the store."}]}]},{"inlineContent":[{"text":"That’s the basics of integrating an alert into our feature, but we are still not handling","type":"text"},{"type":"text","text":" "},{"text":"the new alert actions we added to the domain, nor are we populating the ","type":"text"},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state when"},{"text":" ","type":"text"},{"text":"we want it to appear. Let’s start with the latter, populating alert state.","type":"text"}],"type":"paragraph"},{"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Define a helper on "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" that describes all of the details of the alert, including"},{"text":" ","type":"text"},{"text":"its title, message and buttons. Use that helper to populate the ","type":"text"},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state when"},{"type":"text","text":" "},{"type":"text","text":"tapping the “End meeting” button and when the last speaker is skipped."}],"type":"paragraph"}],"media":null,"code":"ImplementingTimer-03-code-0006.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to handle the new alert actions we added to our domain. In fact, our reducer"},{"text":" ","type":"text"},{"type":"text","text":"is not compiling right now because we need to be exhaustive with our "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."}]},{"type":"step","code":"ImplementingTimer-03-code-0007.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When discarding the meeting, we only need to dismiss the feature. And when saving the"},{"text":" ","type":"text"},{"type":"text","text":"meeting, we will insert the meeting into the shared sync-up and then dismiss."}]}],"media":null,"runtimePreview":null},{"inlineContent":[{"text":"That is all it takes to implement the logic for ending a meeting early. But we can improve the","type":"text"},{"type":"text","text":" "},{"text":"behavior of the feature a lot with one small change.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Right now when you tap “End meeting” an alert shows, which is great, but the timer keeps going"},{"type":"text","text":" "},{"type":"text","text":"in the background. This means you are losing time in the meeting by reading and considering"},{"text":" ","type":"text"},{"type":"text","text":"the alert. Wouldn’t it be better if we could pause the timer when an alert is open?"}]},{"inlineContent":[{"type":"text","text":"Luckily we can, and it’s very straightforward."}],"type":"paragraph"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Guard that the ","type":"text"},{"code":"alert","type":"codeVoice"},{"type":"text","text":" state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"timerTick"},{"text":" action to make sure the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"secondsElapsed"},{"type":"text","text":" state does not increment while an alert is showing."}]}],"runtimePreview":null,"code":"ImplementingTimer-03-code-0008.swift","type":"step"},{"runtimePreview":null,"type":"step","caption":[],"media":"ImplementingTimer-03-video-0009.mov","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the preview in AppFeature.swift again to see that we can end the meeting early now."}]}],"code":null}],"anchor":"Ending-the-meeting-early","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two ways that one can end the meeting early. There is a “next” button for skipping"},{"text":" ","type":"text"},{"text":"the current speaker, and if the last speaker is skipped we would like to end the meeting","type":"text"},{"type":"text","text":" "},{"text":"early. And there is a dedicated “End meeting” button in the top-left.","type":"text"}]},{"inlineContent":[{"text":"Further, in each of these cases we would like to alert the user to let them know they are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ending the meeting early, and have them confirm to do so."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Ending the meeting early"},{"stepsSection":[{"type":"paragraph","inlineContent":[{"text":"We are going to write a test that asserts on everything that happens when the user arrives at","type":"text"},{"type":"text","text":" "},{"text":"the record meeting feature, the timer counts to the end, and a new meeting is inserted into","type":"text"},{"type":"text","text":" "},{"text":"the sync-up and the feature is dismissed from the navigation stack.","type":"text"}]},{"code":"ImplementingTimer-04-code-0001.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called RecordMeetingTests.swift, which will hold the tests for the record"},{"text":" ","type":"text"},{"text":"meeting feature.","type":"text"}]}],"caption":[],"media":null,"runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"Create a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" by specifying the initial state of the","type":"text"},{"type":"text","text":" "},{"text":"feature, and the reducer that we want to test.","type":"text"}],"type":"paragraph"}],"code":"ImplementingTimer-04-code-0002.swift","caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There are 2 attendees in the sync-up and the duration is 4 seconds, giving each"},{"type":"text","text":" "},{"text":"attendee 2 seconds.","type":"text"}]}],"name":"Note","type":"aside"}],"media":null,"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user navigating to the record meeting feature by sending the ","type":"text"},{"type":"codeVoice","code":"onAppear"},{"type":"text","text":" action."},{"text":" ","type":"text"},{"type":"text","text":"This action does not mutate any state, and so there is no need to specify a trailing closure"},{"text":" ","type":"text"},{"type":"text","text":"to describe how state changes."}]}],"media":null,"runtimePreview":null,"code":"ImplementingTimer-04-code-0003.swift","type":"step","caption":[]},{"code":"ImplementingTimer-04-code-0004.swift","caption":[],"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Run the test to see that already we are getting failures.","type":"text"}]}],"type":"step"},{"inlineContent":[{"text":"Each of these failures are good to have because there is behavior occurring in the feature","type":"text"},{"text":" ","type":"text"},{"text":"that we are not asserting against. First, by the time the test finished there was an effect","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"still in flight, which means there could be more actions sent into the system that we are not"},{"type":"text","text":" "},{"text":"accounting for. And second, we are using a dependency without overriding it.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Let’s fix the dependency error first by overriding it with a ","type":"text"},{"code":"TestClock","type":"codeVoice"},{"text":", which allows us to","type":"text"},{"type":"text","text":" "},{"text":"control the flow of time.","type":"text"}]},{"code":"ImplementingTimer-04-code-0005.swift","runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the trailing "},{"type":"codeVoice","code":"withDependencies"},{"type":"text","text":" closure of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" ","type":"text"},{"type":"text","text":"initializer to override the "},{"code":"continuousClock","type":"codeVoice"},{"type":"text","text":" dependency with a "},{"code":"TestClock","type":"codeVoice"},{"type":"text","text":"."}]}],"media":null},{"media":null,"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"code":"advance(by:)","type":"codeVoice"},{"type":"text","text":" method on "},{"type":"codeVoice","code":"clock"},{"type":"text","text":" to advance one second."}],"type":"paragraph"}],"code":"ImplementingTimer-04-code-0006.swift","runtimePreview":null,"type":"step","caption":[]},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Run the test to see that we get a new test failure letting us know that an effect emitted an","type":"text"},{"type":"text","text":" "},{"text":"action back into the system, but we didn’t assert on that action.","type":"text"}]}],"media":null,"caption":[],"code":"ImplementingTimer-04-code-0007.swift"},{"media":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic"},{"type":"text","text":" "},{"text":"method to assert that the store receives a ","type":"text"},{"type":"codeVoice","code":"timerTick"},{"type":"text","text":" action, and that when that action is"},{"text":" ","type":"text"},{"text":"received the ","type":"text"},{"code":"secondsElapsed","type":"codeVoice"},{"text":" state increments to 1.","type":"text"}]}],"type":"step","code":"ImplementingTimer-04-code-0008.swift"},{"inlineContent":[{"text":"Although the test is not passing yet, we have written our first assertion on how an effect","type":"text"},{"text":" ","type":"text"},{"text":"executes and feeds data back into the system. It largely consists of two important steps:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Control the dependencies that your effects use so that you can emulate their behavior in"},{"text":" ","type":"text"},{"type":"text","text":"a test in a deterministic manner. In this case it’s using a "},{"code":"TestClock","type":"codeVoice"},{"type":"text","text":" for the timer instead"},{"type":"text","text":" "},{"text":"of reaching out to the global, uncontrollable ","type":"text"},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"code":"receive","type":"codeVoice"},{"text":" method on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" to assert what actions"},{"type":"text","text":" "},{"type":"text","text":"an effect sends back into the system, and to assert on how state changes when that action"},{"text":" ","type":"text"},{"type":"text","text":"is received."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we can play out the rest of the user script to emulate all 4 seconds passing so that"},{"text":" ","type":"text"},{"type":"text","text":"the meeting ends."}]},{"content":[{"inlineContent":[{"type":"text","text":"Advance the clock 1 more second to assert that we receive another "},{"type":"codeVoice","code":"timerTick"},{"text":" action,","type":"text"},{"text":" ","type":"text"},{"text":"causing the ","type":"text"},{"type":"codeVoice","code":"secondsElapsed"},{"text":" to increment again, but also causing the ","type":"text"},{"code":"speakerIndex","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to increment since it is now the next speaker’s turn.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null,"runtimePreview":null,"code":"ImplementingTimer-04-code-0009.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Advance the clock 1 more second to assert that we receive another "},{"code":"timerTick","type":"codeVoice"},{"text":" action,","type":"text"},{"type":"text","text":" "},{"text":"and this time only the ","type":"text"},{"code":"secondsElapsed","type":"codeVoice"},{"text":" increments.","type":"text"}]}],"runtimePreview":null,"media":null,"type":"step","caption":[],"code":"ImplementingTimer-04-code-0010.swift"},{"runtimePreview":null,"code":"ImplementingTimer-04-code-0011.swift","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, advance the clock 1 more second to assert that we receive another "},{"code":"timerTick","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"action, causing the "},{"type":"codeVoice","code":"secondsElapsed"},{"text":" to increment again, and further causing the meeting","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to end by inserting the meeting into the sync-up."}]}],"caption":[]},{"inlineContent":[{"text":"We have now played out a full script of user actions, alongside a full script of effect","type":"text"},{"text":" ","type":"text"},{"text":"actions and state change expectations. Ideally this would just pass, but there are still a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"few behavioral things happening that the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" wants us to"},{"type":"text","text":" "},{"type":"text","text":"assert on. To see what needs to be asserted, let’s run the test again."}],"type":"paragraph"},{"media":null,"code":"ImplementingTimer-04-code-0012.swift","type":"step","runtimePreview":null,"caption":[{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Scroll to the bottom of the code snippet to see the test failures."}],"type":"paragraph"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test case to see that we still have failures."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are quite a few failures, but luckily they are all straightforward to fix."}]},{"type":"paragraph","inlineContent":[{"text":"The last three failures are all related. The first two complain of using the ","type":"text"},{"type":"codeVoice","code":"\\.date"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\.uuid"},{"type":"text","text":" dependencies without having overridden them. This helps us understand what"},{"type":"text","text":" "},{"text":"dependencies are used in the user flow we are testing. And then the last failure is due to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"our state change expectation not being correct since we didn’t override those dependencies."}]},{"inlineContent":[{"text":"To fix we need to override the ","type":"text"},{"code":"\\.uuid","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"\\.date"},{"type":"text","text":" dependencies so that we can predict the"},{"text":" ","type":"text"},{"type":"text","text":"values they will produce when our feature code is run."}],"type":"paragraph"},{"media":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Set the "},{"type":"codeVoice","code":"date"},{"type":"text","text":" and "},{"code":"uuid","type":"codeVoice"},{"text":" dependencies in the ","type":"text"},{"type":"codeVoice","code":"withDependencies"},{"text":" trailing closure.","type":"text"}],"type":"paragraph"}],"code":"ImplementingTimer-04-code-0013.swift","runtimePreview":null,"type":"step"},{"code":"ImplementingTimer-04-code-0014.swift","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Run tests to see that we are down to just 2 test failures now.","type":"text"}]}],"runtimePreview":null,"caption":[{"style":"note","name":"Note","content":[{"inlineContent":[{"text":"Scroll to the bottom of the code snippet to see the test failures.","type":"text"}],"type":"paragraph"}],"type":"aside"}]},{"type":"paragraph","inlineContent":[{"text":"The first failure is due to the timer effect still running. The","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":" requires that you explicitly make all effects finish","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before the test is over in order to make sure that you are not accidentally missing out on"},{"text":" ","type":"text"},{"text":"future behavior. However, in this case the timer effect is cancelled when the feature is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"dismissed, causing the record meeting feature to be popped off the stack. Since we are only"},{"text":" ","type":"text"},{"type":"text","text":"testing the record meeting feature, and not the full stack, we can explicitly get a handle"},{"type":"text","text":" "},{"type":"text","text":"on the effect created when sending "},{"code":"onAppear","type":"codeVoice"},{"text":" in the test, and manually cancel it at the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"end of the test."}]},{"code":"ImplementingTimer-04-code-0015.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assign a variable to "},{"type":"codeVoice","code":"store.send(.onAppear)"},{"type":"text","text":" and cancel that handle at the end of the test."}]}],"caption":[],"runtimePreview":null,"type":"step","media":null},{"inlineContent":[{"text":"And the second failure to fix is due to the ","type":"text"},{"code":"dismiss","type":"codeVoice"},{"type":"text","text":" dependency being used when the timer"},{"type":"text","text":" "},{"text":"finishes, and we are not asserting on that behavior. This is a great failure to have because","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it forces us to consider how the child feature dismisses itself, and if ever in the future"},{"text":" ","type":"text"},{"text":"we mess up this logic we would have a test in place to keep us in check.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To fix the test we need to override the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/dismiss"},{"type":"text","text":" dependency."}]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Override the "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" dependency in the "},{"code":"withDependencies","type":"codeVoice"},{"type":"text","text":" trailing closure."}]}],"type":"step","caption":[],"media":null,"code":"ImplementingTimer-04-code-0016.swift"},{"inlineContent":[{"type":"text","text":"This technically gets the test passing, but we aren’t actually asserting that the "},{"code":"dismiss","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"dependency was invoked. We are just overriding the dependency to quiet the test failure."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In order to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"prove"}]},{"type":"text","text":" that the "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" effect is invoked, we will create a test expectation,"},{"text":" ","type":"text"},{"type":"text","text":"fulfill it in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"text":", and then wait for its","type":"text"},{"text":" ","type":"text"},{"text":"fulfillment at the end of the test.","type":"text"}],"type":"paragraph"},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/isDismissed","type":"reference","isActive":true},{"text":" property to assert that the feature was dismissed at the","type":"text"},{"type":"text","text":" "},{"text":"end of the test.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"type":"step","code":"ImplementingTimer-04-code-0017.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the entire test is passing, and we have proven that the "},{"code":"dismiss","type":"codeVoice"},{"type":"text","text":" effect is invoked, and"},{"type":"text","text":" "},{"type":"text","text":"so as long as everything is hooked up correctly in the parent we can be sure that the feature"},{"text":" ","type":"text"},{"type":"text","text":"will indeed be popped off the stack."}]},{"inlineContent":[{"text":"By why leave it to chance that the parent and child features are correctly integrated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"together? We can write a test that proves it! And we highly encourage you to give it a"},{"type":"text","text":" "},{"type":"text","text":"shot. 🙂"}],"type":"paragraph"}],"anchor":"Testing-the-timer","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"We have now introduced quite a bit of logic and behavior to this feature, so it would be nice","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to get some test coverage on it to make sure it works as we expect. There are a lot of"},{"text":" ","type":"text"},{"text":"different things we could test, but we will focus on just one major flow, and leave the","type":"text"},{"text":" ","type":"text"},{"text":"other flows as an exercise for the reader.","type":"text"}]}]}],"title":"Testing the timer"}],"kind":"tasks"},{"kind":"callToAction","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer"},"featuredEyebrow":"Tutorial","title":"Adding a speech recognizer","abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"text":" ","type":"text"},{"text":"in progress.","type":"text"}]}],"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail"},{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail"},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting"}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps"},"metadata":{"role":"project","category":"Building SyncUps","categoryPathComponent":"BuildingSyncUps","title":"Adding a meeting timer"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"type":"topic","title":"run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": ((any "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Dependencies/DependencyValues/dismiss":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/dismiss","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/dependencies\/dependencyvalues\/dismiss","title":"dismiss","abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"},{"text":": ","kind":"text"},{"text":"DismissEffect","preciseIdentifier":"s:22ComposableArchitecture13DismissEffectV","kind":"typeIdentifier"}]},"ImplementingTimer-04-code-0012.swift":{"highlights":[{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84}],"syntax":"swift","type":"file","identifier":"ImplementingTimer-04-code-0012.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","    }","","    await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.speakerIndex = 1","      $0.secondsElapsed = 2","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 3","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 4","      $0.syncUp.meetings.insert(","        Meeting(","          id: UUID(0),","          date: Date(timeIntervalSince1970: 1234567890),","          transcript: \"\"","        ),","        at: 0","      )","    }","    \/\/ ❌ An effect returned for this action is still running. It must complete before the end of the test. …","    \/\/ ❌ Unimplemented: @Dependency(\\.date) …","    \/\/ ❌ @Dependency(\\.uuid) has no test implementation, but was accessed from a test context:","    \/\/ ❌ A state change does not match expectation: …","    \/\/    RecordMeeting.State(","    \/\/        _alert: nil,","    \/\/        _secondsElapsed: 6,","    \/\/        _speakerIndex: 2,","    \/\/        _syncUp: #1 SyncUp(","    \/\/            id: Tagged(rawValue: UUID(A1EAB819-1283-4EDC-8492-ACBF231FAC0D)),","    \/\/            attendees: […],","    \/\/            duration: 6 seconds,","    \/\/            meetings: [","    \/\/                [0]: Meeting(","    \/\/          −         id: Tagged(rawValue: UUID(00000000-0000-0000-0000-000000000000))","    \/\/          +         id: Tagged(rawValue: UUID(E4299FB9-6B29-425D-93FE-23C7B9C8663B))","    \/\/          −         date: Date(2009-02-13T23:31:30.000Z),","    \/\/          +         date: Date(2024-05-01T18:09:15.218Z),","    \/\/                    transcript: \"\"","    \/\/                  )","    \/\/              ],","    \/\/            theme: .bubblegum,","    \/\/            title: \"\"","    \/\/          ),","    \/\/        _transcript: \"\"","    \/\/      )","    \/\/","    \/\/  (Expected: −, Actual: +)","  }","}"],"fileType":"swift","fileName":"RecordMeetingTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"kind":"project","estimatedTime":"25min","type":"topic","title":"Adding a meeting timer","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"text":" ","type":"text"},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"url":"\/tutorials\/composablearchitecture\/implementingtimer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"kind":"project","title":"What is SyncUps?","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","url":"\/tutorials\/composablearchitecture\/whatissyncups","role":"project","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"type":"topic","estimatedTime":"5min"},"ImplementingTimer-03-code-0006.swift":{"fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","","    enum Alert {","      case discardMeeting","      case saveMeeting","    }","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        state.alert = .endMeeting","        return .none","","      case .nextButtonTapped:","        guard state.speakerIndex < state.syncUp.attendees.count - 1","        else {","          state.alert = .endMeeting","          return .none","        }","        state.speakerIndex += 1","        state.secondsElapsed = state.speakerIndex * Int(state.syncUp.durationPerAttendee.components.seconds)","        return .none","","      case .onAppear:","        return .run { send in","          for await _ in clock.timer(interval: .seconds(1)) {","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}","","extension AlertState where Action == RecordMeeting.Action.Alert {","  static var endMeeting: Self {","    Self {","      TextState(\"End meeting?\")","    } actions: {","      ButtonState(action: .saveMeeting) {","        TextState(\"Save and end\")","      }","      ButtonState(role: .destructive, action: .discardMeeting) {","        TextState(\"Discard\")","      }","      ButtonState(role: .cancel) {","        TextState(\"Resume\")","      }","    } message: {","      TextState(\"You are ending the meeting early. What would you like to do?\")","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileName":"RecordMeeting.swift","type":"file","identifier":"ImplementingTimer-03-code-0006.swift","highlights":[{"line":40},{"line":46},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99}],"syntax":"swift"},"ImplementingTimer-04-code-0016.swift":{"highlights":[{"line":28}],"fileName":"RecordMeetingTests.swift","type":"file","identifier":"ImplementingTimer-04-code-0016.swift","fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","      $0.date.now = Date(timeIntervalSince1970: 1234567890)","      $0.uuid = .incrementing","      $0.dismiss = DismissEffect {}","    }","","    let onAppearTask = await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.speakerIndex = 1","      $0.secondsElapsed = 2","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 3","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 4","      $0.syncUp.meetings.insert(","        Meeting(","          id: UUID(0),","          date: Date(timeIntervalSince1970: 1234567890),","          transcript: \"\"","        ),","        at: 0","      )","    }","","    await onAppearTask.cancel()","  }","}"],"syntax":"swift"},"ImplementingTimer-04-code-0003.swift":{"fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    }","","    await store.send(.onAppear)","  }","}"],"fileName":"RecordMeetingTests.swift","type":"file","identifier":"ImplementingTimer-04-code-0003.swift","highlights":[{"line":24},{"line":25}],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"title":"A handy debugging tool","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"text":" ","type":"text"},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"text":" ","type":"text"},{"type":"text","text":"the app evolves."}],"url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together","title":"Integrating the feature views together","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"section"},"ImplementingTimer-01-code-0005.swift":{"highlights":[{"line":21}],"identifier":"ImplementingTimer-01-code-0005.swift","syntax":"swift","fileType":"swift","type":"file","fileName":"RecordMeeting.swift","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","          }","        }","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling","role":"pseudoSymbol","title":"More concise domain modeling"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"type":"section","title":"Deleting a sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","kind":"section","url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up","role":"pseudoSymbol","abstract":[{"text":"We have now implemented a navigation stack at the root of our application, and integrated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" feature, and the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"text":" ","type":"text"},{"text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack.","type":"text"}]},"ImplementingTimer-03-code-0007.swift":{"fileType":"swift","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51}],"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","","    enum Alert {","      case discardMeeting","      case saveMeeting","    }","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.discardMeeting)):","        return .run { _ in await dismiss() }","","      case .alert(.presented(.saveMeeting)):","        state.syncUp.meetings.insert(","          Meeting(id: uuid(), date: now, transcript: state.transcript),","          at: 0","        )","        return .run { _ in await dismiss() }","","      case .alert:","        return .none","","      case .endMeetingButtonTapped:","        state.alert = .endMeeting","        return .none","","      case .nextButtonTapped:","        guard state.speakerIndex < state.syncUp.attendees.count - 1","        else {","          state.alert = .endMeeting","          return .none","        }","        state.speakerIndex += 1","        state.secondsElapsed = state.speakerIndex * Int(state.syncUp.durationPerAttendee.components.seconds)","        return .none","","      case .onAppear:","        return .run { send in","          for await _ in clock.timer(interval: .seconds(1)) {","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}","","extension AlertState where Action == RecordMeeting.Action.Alert {","  static var endMeeting: Self {","    Self {","      TextState(\"End meeting?\")","    } actions: {","      ButtonState(action: .saveMeeting) {","        TextState(\"Save and end\")","      }","      ButtonState(role: .destructive, action: .discardMeeting) {","        TextState(\"Discard\")","      }","      ButtonState(role: .cancel) {","        TextState(\"Resume\")","      }","    } message: {","      TextState(\"You are ending the meeting early. What would you like to do?\")","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"identifier":"ImplementingTimer-03-code-0007.swift","fileName":"RecordMeeting.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"estimatedTime":"5min","title":"Testing the list of sync-ups","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","kind":"project","role":"project","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"text":" ","type":"text"},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"url":"\/tutorials\/composablearchitecture\/testinglistofsyncups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"kind":"section","type":"section","title":"Testing persistence","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"text":" ","type":"text"},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true,"overridingTitle":"@Shared","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"text":".","type":"text"}],"url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"kind":"project","estimatedTime":"5min","type":"topic","title":"Sync-up detail","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"url":"\/tutorials\/composablearchitecture\/syncupdetail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","role":"project"},"ImplementingTimer-04-code-0002.swift":{"type":"file","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    }","  }","}"],"fileType":"swift","fileName":"RecordMeetingTests.swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}],"syntax":"swift","identifier":"ImplementingTimer-04-code-0002.swift"},"ImplementingTimer-01-video-0012.mov":{"type":"video","alt":null,"identifier":"ImplementingTimer-01-video-0012.mov","poster":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/ImplementingTimer-01-video-0012.mov"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"title":"Removing attendees","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"url":"\/tutorials\/buildingsyncups\/what-is-syncups-","abstract":[],"title":"What is SyncUps?","role":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","kind":"article"},"ImplementingTimer-01-code-0003.swift":{"type":"file","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","        }","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","fileName":"RecordMeeting.swift","highlights":[{"line":33},{"line":34}],"syntax":"swift","identifier":"ImplementingTimer-01-code-0003.swift"},"ImplementingTimer-01-code-0002.swift":{"fileName":"RecordMeeting.swift","identifier":"ImplementingTimer-01-code-0002.swift","syntax":"swift","fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"type":"file"},"ImplementingTimer-01-code-0007.swift":{"type":"file","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","fileName":"RecordMeeting.swift","highlights":[{"line":42}],"syntax":"swift","identifier":"ImplementingTimer-01-code-0007.swift"},"ImplementingTimer-04-code-0011.swift":{"fileName":"RecordMeetingTests.swift","identifier":"ImplementingTimer-04-code-0011.swift","syntax":"swift","fileType":"swift","highlights":[{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","    }","","    await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.speakerIndex = 1","      $0.secondsElapsed = 2","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 3","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 4","      $0.syncUp.meetings.insert(","        Meeting(","          id: UUID(0),","          date: Date(timeIntervalSince1970: 1234567890),","          transcript: \"\"","        ),","        at: 0","      )","    }","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","kind":"article","url":"\/tutorials\/buildingsyncups\/sync-up-detail","title":"Sync-up detail","role":"article","abstract":[],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail","role":"pseudoSymbol","title":"Navigating to the detail"},"ImplementingTimer-03-video-0009.mov":{"type":"video","alt":null,"identifier":"ImplementingTimer-03-video-0009.mov","poster":null,"variants":[{"url":"\/videos\/ComposableArchitecture\/ImplementingTimer-03-video-0009.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"title":"Navigating to the record meeting feature","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","kind":"section","role":"pseudoSymbol","abstract":[{"text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"section","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission","title":"Asking for speech recognition permission","role":"pseudoSymbol","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"text":" ","type":"text"},{"text":"audio, and then start a speech recognition task to live transcribe the meeting while it is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"type":"section"},"ImplementingTimer-04-code-0014.swift":{"fileName":"RecordMeetingTests.swift","identifier":"ImplementingTimer-04-code-0014.swift","syntax":"swift","fileType":"swift","highlights":[{"line":59}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","      $0.date.now = Date(timeIntervalSince1970: 1234567890)","      $0.uuid = .incrementing","    }","","    await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.speakerIndex = 1","      $0.secondsElapsed = 2","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 3","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 4","      $0.syncUp.meetings.insert(","        Meeting(","          id: UUID(0),","          date: Date(timeIntervalSince1970: 1234567890),","          transcript: \"\"","        ),","        at: 0","      )","    }","    \/\/ ❌ An effect returned for this action is still running. It must complete before the end of the test. …","  }","}"],"type":"file"},"ImplementingTimer-04-code-0008.swift":{"type":"file","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","    }","","    await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","  }","}"],"fileType":"swift","fileName":"RecordMeetingTests.swift","highlights":[{"line":30},{"line":31},{"line":32}],"syntax":"swift","identifier":"ImplementingTimer-04-code-0008.swift"},"ImplementingTimer-03-code-0003.swift":{"fileName":"RecordMeeting.swift","identifier":"ImplementingTimer-03-code-0003.swift","syntax":"swift","fileType":"swift","highlights":[{"line":19},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","","    enum Alert {","      case discardMeeting","      case saveMeeting","    }","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        \/\/ TODO: Alert to confirm ending meeting","        return .none","","      case .nextButtonTapped:","        guard state.speakerIndex < state.syncUp.attendees.count - 1","        else {","          \/\/ TODO: Alert to confirm ending meeting","          return .none","        }","        state.speakerIndex += 1","        state.secondsElapsed = state.speakerIndex * Int(state.syncUp.durationPerAttendee.components.seconds)","        return .none","","      case .onAppear:","        return .run { send in","          for await _ in clock.timer(interval: .seconds(1)) {","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"text":" ","type":"text"},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"text":" ","type":"text"},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","role":"pseudoSymbol","title":"Create the sync-up detail","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"type":"section","title":"Adding a new sync-up to the list","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","kind":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list","role":"pseudoSymbol","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"text":" ","type":"text"},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"text":" ","type":"text"},{"type":"text","text":"add that sync-up to the root list."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen","title":"The meeting screen","role":"pseudoSymbol","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"title":"Deleting the sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"type":"section","title":"Writing your first test","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"section","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test","role":"pseudoSymbol","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"text":" ","type":"text"},{"text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"text":" ","type":"text"},{"type":"text","text":"behavior to test."}]},"ImplementingTimer-01-code-0008.swift":{"type":"file","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","fileName":"RecordMeeting.swift","highlights":[{"line":43},{"line":44},{"line":45},{"line":46}],"syntax":"swift","identifier":"ImplementingTimer-01-code-0008.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true,"type":"reference"},{"text":".","type":"text"}],"url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk","title":"Persisting data to disk","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"title":"Adding a sync-up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"text":" ","type":"text"},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"text":" ","type":"text"},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","kind":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow","title":"Testing the edit flow","role":"pseudoSymbol","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"text":" ","type":"text"},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"text":" ","type":"text"},{"text":"communicates with a parent feature via delegate actions. It’s about time we got some test","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","kind":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting","title":"Navigate to a meeting","role":"pseudoSymbol","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"type":"section"},"ImplementingTimer-02-code-0004.swift":{"fileName":"RecordMeeting.swift","identifier":"ImplementingTimer-02-code-0004.swift","syntax":"swift","fileType":"swift","highlights":[{"line":40}],"content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          for await _ in clock.timer(interval: .seconds(1)) {","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","kind":"project","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature","estimatedTime":"5min","title":"The RecordMeeting feature","role":"project","abstract":[{"text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will","type":"text"},{"text":" ","type":"text"},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"type":"topic"},"ImplementingTimer-04-code-0007.swift":{"type":"file","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","    }","","    await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    \/\/ ❌ The store received 1 unexpected action by the end of this test: …","    \/\/","    \/\/   Unhandled actions:","    \/\/     • .timerTick","  }","}"],"fileType":"swift","fileName":"RecordMeetingTests.swift","highlights":[{"line":30},{"line":31},{"line":32},{"line":33}],"syntax":"swift","identifier":"ImplementingTimer-04-code-0007.swift"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"title":"Building SyncUps","abstract":[{"text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"type":"text","text":"domain modeling, controlling dependencies, and testability."}],"kind":"overview","role":"overview","url":"\/tutorials\/buildingsyncups","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","kind":"project","url":"\/tutorials\/composablearchitecture\/testingsyncupform","estimatedTime":"10min","title":"Testing the sync-up form","role":"project","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"text":" ","type":"text"},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","kind":"symbol","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"title":"TestStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","kind":"article","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form","title":"Presenting the sync-up form","role":"article","abstract":[],"type":"topic"},"ImplementingTimer-01-code-0006.swift":{"fileName":"RecordMeeting.swift","identifier":"ImplementingTimer-01-code-0006.swift","syntax":"swift","fileType":"swift","highlights":[{"line":37},{"line":40},{"line":41},{"line":42}],"content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","","      case .timerTick:","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"type":"section","title":"A tour of SyncUps","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps","role":"pseudoSymbol","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"text":" ","type":"text"},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"estimatedTime":"30min","title":"Editing and deleting a sync-up","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","kind":"project","role":"project","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"text":" ","type":"text"},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"type":"section","role":"pseudoSymbol","kind":"section","title":"Editing the sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"text":" ","type":"text"},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up"},"ImplementingTimer-03-code-0004.swift":{"type":"file","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","","    enum Alert {","      case discardMeeting","      case saveMeeting","    }","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        \/\/ TODO: Alert to confirm ending meeting","        return .none","","      case .nextButtonTapped:","        guard state.speakerIndex < state.syncUp.attendees.count - 1","        else {","          \/\/ TODO: Alert to confirm ending meeting","          return .none","        }","        state.speakerIndex += 1","        state.secondsElapsed = state.speakerIndex * Int(state.syncUp.durationPerAttendee.components.seconds)","        return .none","","      case .onAppear:","        return .run { send in","          for await _ in clock.timer(interval: .seconds(1)) {","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","fileName":"RecordMeeting.swift","highlights":[{"line":76}],"syntax":"swift","identifier":"ImplementingTimer-03-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"title":"Non-exhaustive testing","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"type":"text","text":" "},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"},"ImplementingTimer-04-code-0017.swift":{"fileName":"RecordMeetingTests.swift","identifier":"ImplementingTimer-04-code-0017.swift","syntax":"swift","fileType":"swift","highlights":[{"line":61}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","      $0.date.now = Date(timeIntervalSince1970: 1234567890)","      $0.uuid = .incrementing","    }","","    let onAppearTask = await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.speakerIndex = 1","      $0.secondsElapsed = 2","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 3","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 4","      $0.syncUp.meetings.insert(","        Meeting(","          id: UUID(0),","          date: Date(timeIntervalSince1970: 1234567890),","          transcript: \"\"","        ),","        at: 0","      )","    }","","    await onAppearTask.cancel()","    #expect(store.isDismissed)","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","kind":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees","title":"Adding attendees","role":"pseudoSymbol","abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"text":" ","type":"text"},{"text":"to use Apple’s ","type":"text"},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"text":" ","type":"text"},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"text":" ","type":"text"},{"type":"text","text":"in progress."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","role":"project","title":"Adding a speech recognizer","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer","type":"topic","kind":"project","estimatedTime":"10min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"fileStorage","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:10Foundation3URLV","text":"URL","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"decoder"},{"kind":"text","text":": "},{"text":"JSONDecoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"encoder"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"JSONEncoder","preciseIdentifier":"s:10Foundation11JSONEncoderC"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","title":"fileStorage(_:decoder:encoder:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/filestorage(_:decoder:encoder:)","role":"symbol","abstract":[{"text":"Creates a persistence key that can read and write to a ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value in the file system."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction","title":"PresentationAction","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","role":"symbol","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"url":"\/tutorials\/composablearchitecture\/presentingsyncupform","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"title":"Presenting the sync-up form","role":"project","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","estimatedTime":"10min","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"title":"Creating the app feature","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","kind":"article","url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail","title":"Navigating to sync-up detail","role":"article","abstract":[],"type":"topic"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"kind":"article","abstract":[],"url":"\/tutorials\/buildingsyncups\/record-meeting","role":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","title":"Record meeting"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"url":"\/tutorials\/composablearchitecture\/testingsyncupdetail","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"text":" ","type":"text"},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"text":"communicates with a parent feature via delegate actions. It’s about time we got some test","type":"text"},{"text":" ","type":"text"},{"text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future","type":"text"},{"text":" ","type":"text"},{"text":"changes with confidence.","type":"text"}],"title":"Testing the sync-up detail","role":"project","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","estimatedTime":"10min","kind":"project"},"ImplementingTimer-02-code-0001.swift":{"type":"file","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: Meeting.ID(), date: Date(), transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","fileName":"RecordMeeting.swift","highlights":[{"line":25},{"line":26}],"syntax":"swift","identifier":"ImplementingTimer-02-code-0001.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:filepath:line:column:)-4ub6q","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"PresentationState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"text":"PresentationAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">\n","kind":"text"}],"title":"ifLet(_:action:destination:fileID:filePath:line:column:)"},"ImplementingTimer-04-code-0010.swift":{"fileName":"RecordMeetingTests.swift","identifier":"ImplementingTimer-04-code-0010.swift","syntax":"swift","fileType":"swift","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":43}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","    }","","    await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.speakerIndex = 1","      $0.secondsElapsed = 2","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 3","    }","  }","}"],"type":"file"},"ImplementingTimer-03-code-0001.swift":{"type":"file","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        \/\/ TODO: Alert to confirm ending meeting","        return .none","","      case .nextButtonTapped:","        guard state.speakerIndex < state.syncUp.attendees.count - 1","        else {","          \/\/ TODO: Alert to confirm ending meeting","          return .none","        }","        state.speakerIndex += 1","        state.secondsElapsed = state.speakerIndex * Int(state.syncUp.durationPerAttendee.components.seconds)","        return .none","","      case .onAppear:","        return .run { send in","          for await _ in clock.timer(interval: .seconds(1)) {","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","fileName":"RecordMeeting.swift","highlights":[{"line":33},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43}],"syntax":"swift","identifier":"ImplementingTimer-03-code-0001.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"title":"Lists of sync-ups","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"kind":"project","estimatedTime":"10min","role":"project","url":"\/tutorials\/composablearchitecture\/listsofsyncups","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"navigatorTitle":[{"text":"DismissEffect","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","role":"symbol","type":"topic","title":"DismissEffect","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DismissEffect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-53wic":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"type":"topic","title":"receive(_:timeout:assert:fileID:file:line:column:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-53wic","role":"symbol","abstract":[{"type":"text","text":"Asserts an action was received matching a case path and asserts how the state changes."}],"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"ImplementingTimer-04-code-0004.swift":{"fileName":"RecordMeetingTests.swift","identifier":"ImplementingTimer-04-code-0004.swift","syntax":"swift","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    }","","    await store.send(.onAppear)","    \/\/ ❌ An effect returned for this action is still running. It must complete before the end of the test. …","    \/\/ ❌ Unimplemented: ContinuousClock.now …","    \/\/ ❌ Unimplemented: ContinuousClock.sleep …","  }","}"],"type":"file"},"ImplementingTimer-02-code-0003.swift":{"type":"file","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","fileName":"RecordMeeting.swift","highlights":[{"line":24}],"syntax":"swift","identifier":"ImplementingTimer-02-code-0003.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/isDismissed":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isDismissed","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"type":"topic","title":"isDismissed","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/isDismissed","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/isdismissed","role":"symbol","abstract":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the store’s feature has been dismissed."}]},"ImplementingTimer-03-code-0002.swift":{"fileName":"RecordMeeting.swift","identifier":"ImplementingTimer-03-code-0002.swift","syntax":"swift","fileType":"swift","highlights":[{"line":7}],"content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        \/\/ TODO: Alert to confirm ending meeting","        return .none","","      case .nextButtonTapped:","        guard state.speakerIndex < state.syncUp.attendees.count - 1","        else {","          \/\/ TODO: Alert to confirm ending meeting","          return .none","        }","        state.speakerIndex += 1","        state.secondsElapsed = state.speakerIndex * Int(state.syncUp.durationPerAttendee.components.seconds)","        return .none","","      case .onAppear:","        return .run { send in","          for await _ in clock.timer(interval: .seconds(1)) {","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","role":"pseudoSymbol","title":"Form focus: a better approach","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach","type":"section","kind":"section"},"ImplementingTimer-01-code-0010.swift":{"type":"file","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: Meeting.ID(), date: Date(), transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","fileName":"RecordMeeting.swift","highlights":[{"line":24},{"line":25},{"line":52}],"syntax":"swift","identifier":"ImplementingTimer-01-code-0010.swift"},"ImplementingTimer-04-code-0009.swift":{"fileName":"RecordMeetingTests.swift","identifier":"ImplementingTimer-04-code-0009.swift","syntax":"swift","fileType":"swift","highlights":[{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","    }","","    await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.speakerIndex = 1","      $0.secondsElapsed = 2","    }","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"text":" ","type":"text"},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","role":"pseudoSymbol","title":"Testing the timer","url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project","title":"Create the SyncUps project","role":"pseudoSymbol","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"type":"section"},"ImplementingTimer-04-code-0001.swift":{"type":"file","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","  }","}"],"fileType":"swift","fileName":"RecordMeetingTests.swift","highlights":[],"syntax":"swift","identifier":"ImplementingTimer-04-code-0001.swift"},"ImplementingTimer-04-code-0013.swift":{"fileName":"RecordMeetingTests.swift","identifier":"ImplementingTimer-04-code-0013.swift","syntax":"swift","fileType":"swift","highlights":[{"line":26},{"line":27}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","      $0.date.now = Date(timeIntervalSince1970: 1234567890)","      $0.uuid = .incrementing","    }","","    await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.speakerIndex = 1","      $0.secondsElapsed = 2","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 3","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 4","      $0.syncUp.meetings.insert(","        Meeting(","          id: UUID(0),","          date: Date(timeIntervalSince1970: 1234567890),","          transcript: \"\"","        ),","        at: 0","      )","    }","  }","}"],"type":"file"},"ImplementingTimer-03-code-0005.swift":{"highlights":[{"line":119}],"type":"file","fileName":"RecordMeeting.swift","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","","    enum Alert {","      case discardMeeting","      case saveMeeting","    }","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        \/\/ TODO: Alert to confirm ending meeting","        return .none","","      case .nextButtonTapped:","        guard state.speakerIndex < state.syncUp.attendees.count - 1","        else {","          \/\/ TODO: Alert to confirm ending meeting","          return .none","        }","        state.speakerIndex += 1","        state.secondsElapsed = state.speakerIndex * Int(state.syncUp.durationPerAttendee.components.seconds)","        return .none","","      case .onAppear:","        return .run { send in","          for await _ in clock.timer(interval: .seconds(1)) {","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","syntax":"swift","identifier":"ImplementingTimer-03-code-0005.swift"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","kind":"article","url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups","title":"Lists of sync-ups","role":"article","abstract":[],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"title":"Navigating to a sync-up detail","role":"project","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","estimatedTime":"20min","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early","title":"Controlling dependencies early","role":"pseudoSymbol","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"type":"section"},"ImplementingTimer-04-code-0015.swift":{"fileName":"RecordMeetingTests.swift","identifier":"ImplementingTimer-04-code-0015.swift","syntax":"swift","fileType":"swift","highlights":[{"line":30},{"line":59},{"line":60}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","      $0.date.now = Date(timeIntervalSince1970: 1234567890)","      $0.uuid = .incrementing","    }","","    let onAppearTask = await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 1","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.speakerIndex = 1","      $0.secondsElapsed = 2","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 3","    }","","    await clock.advance(by: .seconds(1))","    await store.receive(\\.timerTick) {","      $0.secondsElapsed = 4","      $0.syncUp.meetings.insert(","        Meeting(","          id: UUID(0),","          date: Date(timeIntervalSince1970: 1234567890),","          transcript: \"\"","        ),","        at: 0","      )","    }","","    await onAppearTask.cancel()","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"url":"\/tutorials\/composablearchitecture\/meetingnavigation","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"title":"Navigating to a meeting","role":"project","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","estimatedTime":"5min","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","kind":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early","title":"Ending the meeting early","role":"pseudoSymbol","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"type":"section","kind":"section","title":"Integrating the feature domains together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"estimatedTime":"10min","title":"Testing the add sync-up flow","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","kind":"project","role":"project","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":", and"},{"type":"text","text":" "},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"title":"Sync-up form","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"kind":"project","estimatedTime":"15min","role":"project","url":"\/tutorials\/composablearchitecture\/syncupform","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},"ImplementingTimer-03-code-0008.swift":{"highlights":[{"line":74},{"line":75},{"line":76}],"type":"file","fileName":"RecordMeeting.swift","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","","    enum Alert {","      case discardMeeting","      case saveMeeting","    }","  }","","  @Dependency(\\.continuousClock) var clock","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.discardMeeting)):","        return .run { _ in await dismiss() }","","      case .alert(.presented(.saveMeeting)):","        state.syncUp.meetings.insert(","          Meeting(id: uuid(), date: now, transcript: state.transcript),","          at: 0","        )","        return .run { _ in await dismiss() }","","      case .alert:","        return .none","","      case .endMeetingButtonTapped:","        state.alert = .endMeeting","        return .none","","      case .nextButtonTapped:","        guard state.speakerIndex < state.syncUp.attendees.count - 1","        else {","          state.alert = .endMeeting","          return .none","        }","        state.speakerIndex += 1","        state.secondsElapsed = state.speakerIndex * Int(state.syncUp.durationPerAttendee.components.seconds)","        return .none","","      case .onAppear:","        return .run { send in","          for await _ in clock.timer(interval: .seconds(1)) {","            await send(.timerTick)","          }","        }","","      case .timerTick:","        guard state.alert == nil","        else { return .none }","        ","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}","","extension AlertState where Action == RecordMeeting.Action.Alert {","  static var endMeeting: Self {","    Self {","      TextState(\"End meeting?\")","    } actions: {","      ButtonState(action: .saveMeeting) {","        TextState(\"Save and end\")","      }","      ButtonState(role: .destructive, action: .discardMeeting) {","        TextState(\"Discard\")","      }","      ButtonState(role: .cancel) {","        TextState(\"Resume\")","      }","    } message: {","      TextState(\"You are ending the meeting early. What would you like to do?\")","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","syntax":"swift","identifier":"ImplementingTimer-03-code-0008.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","kind":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer","title":"A basic timer","role":"pseudoSymbol","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models","title":"Domain models","role":"pseudoSymbol","abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"text":"the app evolves.","type":"text"}],"type":"section"},"ImplementingTimer-04-code-0006.swift":{"fileName":"RecordMeetingTests.swift","identifier":"ImplementingTimer-04-code-0006.swift","syntax":"swift","fileType":"swift","highlights":[{"line":29}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","    }","","    await store.send(.onAppear)","    await clock.advance(by: .seconds(1))","  }","}"],"type":"file"},"ImplementingTimer-04-code-0005.swift":{"highlights":[{"line":10},{"line":24},{"line":25}],"type":"file","fileName":"RecordMeetingTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct RecordMeetingTests {","  @Test","  func timerFinishes() async {","    let clock = TestClock()","    let syncUp = SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","      ],","      duration: .seconds(4),","      title: \"Morning Sync\"","    )","    let store = TestStore(","      initialState: RecordMeeting.State(syncUp: Shared(syncUp))","    ) {","      RecordMeeting()","    } withDependencies: {","      $0.continuousClock = clock","    }","","    await store.send(.onAppear)","  }","}"],"fileType":"swift","syntax":"swift","identifier":"ImplementingTimer-04-code-0005.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","kind":"project","url":"\/tutorials\/composablearchitecture\/testingnavigation","estimatedTime":"10min","title":"Testing navigation","role":"project","abstract":[{"text":"We have now implemented a navigation stack at the root of our application, and integrated","type":"text"},{"text":" ","type":"text"},{"text":"3 features into the stack: the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" feature, and the","type":"text"},{"text":" ","type":"text"},{"code":"MeetingView","type":"codeVoice"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","kind":"article","url":"\/tutorials\/buildingsyncups\/new-sync-up-form","title":"New sync-up form","role":"article","abstract":[],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"title":"Sync-up form basics","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view","title":"Creating the app view","role":"pseudoSymbol","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"type":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"title":"Persisting sync-ups to disk","abstract":[],"kind":"article","role":"article","url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk"},"ImplementingTimer-01-code-0009.swift":{"fileName":"RecordMeeting.swift","identifier":"ImplementingTimer-01-code-0009.swift","syntax":"swift","fileType":"swift","highlights":[{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50}],"content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: Meeting.ID(), date: Date(), transcript: state.transcript),","              at: 0","            )","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","kind":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature","title":"Create a new feature","role":"pseudoSymbol","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach","title":"Form focus: an approach","role":"pseudoSymbol","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"type":"text","text":" "},{"text":"feature to make things a little more interesting.","type":"text"}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"type":"section","title":"SyncUpsList feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature","role":"pseudoSymbol","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"text":" ","type":"text"},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"text":" ","type":"text"},{"type":"text","text":"the app evolves."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:fileID:filePath:line:column:)-3ux09":{"role":"symbol","type":"topic","kind":"symbol","title":"ifLet(_:action:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">\n","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:fileID:filePath:line:column:)-3ux09","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:fileid:filepath:line:column:)-3ux09","abstract":[{"text":"A special overload of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":" for alerts"},{"type":"text","text":" "},{"type":"text","text":"and confirmation dialogs that does not require a child reducer."}]},"ImplementingTimer-01-code-0001.swift":{"fileName":"RecordMeeting.swift","identifier":"ImplementingTimer-01-code-0001.swift","syntax":"swift","fileType":"swift","highlights":[{"line":20},{"line":62}],"content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"kind":"project","estimatedTime":"5min","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"text":" ","type":"text"},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"type":"reference"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)"},{"type":"text","text":"."}],"url":"\/tutorials\/composablearchitecture\/persistingsyncups","title":"Persisting sync-ups","type":"topic"},"ImplementingTimer-01-code-0004.swift":{"highlights":[{"line":34},{"line":35},{"line":36}],"type":"file","fileName":"RecordMeeting.swift","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","          }","        }","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"fileType":"swift","syntax":"swift","identifier":"ImplementingTimer-01-code-0004.swift"},"ImplementingTimer-01-code-0011.swift":{"fileName":"AppFeature.swift","identifier":"ImplementingTimer-01-code-0011.swift","syntax":"swift","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  \/\/ ...","}","","struct AppView: View {","  \/\/ ...","}","","#Preview {","  @Shared(.syncUps) var syncUps = [","    SyncUp(","      id: SyncUp.ID(),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr\"),","        Attendee(id: Attendee.ID(), name: \"Blob Sr\"),","      ],","      duration: .seconds(6),","      meetings: [],","      theme: .orange,","      title: \"Morning Sync\"","    )","  ]","  ","  return AppView(","    store: Store(","      initialState: App.State(","        syncUpsList: SyncUpsList.State()","      )","    ) {","      App()","    }","  )","}"],"type":"file"},"ImplementingTimer-02-code-0002.swift":{"fileName":"RecordMeeting.swift","highlights":[{"line":51}],"syntax":"swift","fileType":"swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct RecordMeeting {","  @ObservableState","  struct State: Equatable {","    var secondsElapsed = 0","    var speakerIndex = 0","    @Shared var syncUp: SyncUp","    var transcript = \"\"","","    var durationRemaining: Duration {","      syncUp.duration - .seconds(secondsElapsed)","    }","  }","","  enum Action {","    case endMeetingButtonTapped","    case nextButtonTapped","    case onAppear","    case timerTick","  }","","  @Dependency(\\.dismiss) var dismiss","  @Dependency(\\.date.now) var now","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .endMeetingButtonTapped:","        return .none","","      case .nextButtonTapped:","        return .none","","      case .onAppear:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.secondsElapsed += 1","        let secondsPerAttendee = Int(state.syncUp.durationPerAttendee.components.seconds)","        if state.secondsElapsed.isMultiple(of: secondsPerAttendee) {","          if state.secondsElapsed == state.syncUp.duration.components.seconds {","            state.syncUp.meetings.insert(","              Meeting(id: uuid(), date: now, transcript: state.transcript),","              at: 0","            )","            return .run { _ in await dismiss() }","          }","          state.speakerIndex += 1","        }","        return .none","      }","    }","  }","}","","struct RecordMeetingView: View {","  @Bindable var store: StoreOf<RecordMeeting>","","  var body: some View {","    ZStack {","      RoundedRectangle(cornerRadius: 16)","        .fill(store.syncUp.theme.mainColor)","","      VStack {","        MeetingHeaderView(","          secondsElapsed: store.secondsElapsed,","          durationRemaining: store.durationRemaining,","          theme: store.syncUp.theme","        )","        MeetingTimerView(","          syncUp: store.syncUp,","          speakerIndex: store.speakerIndex","        )","        MeetingFooterView(","          syncUp: store.syncUp,","          nextButtonTapped: {","            store.send(.nextButtonTapped)","          },","          speakerIndex: store.speakerIndex","        )","      }","    }","    .padding()","    .foregroundColor(store.syncUp.theme.accentColor)","    .navigationBarTitleDisplayMode(.inline)","    .toolbar {","      ToolbarItem(placement: .cancellationAction) {","        Button(\"End meeting\") {","          store.send(.endMeetingButtonTapped)","        }","      }","    }","    .navigationBarBackButtonHidden(true)","    .onAppear { store.send(.onAppear) }","  }","}","","struct MeetingHeaderView: View {","  let secondsElapsed: Int","  let durationRemaining: Duration","  let theme: Theme","","  var body: some View {","    VStack {","      ProgressView(value: progress)","        .progressViewStyle(MeetingProgressViewStyle(theme: theme))","      HStack {","        VStack(alignment: .leading) {","          Text(\"Time Elapsed\")","            .font(.caption)","          Label(","            Duration.seconds(secondsElapsed).formatted(.units()),","            systemImage: \"hourglass.bottomhalf.fill\"","          )","        }","        Spacer()","        VStack(alignment: .trailing) {","          Text(\"Time Remaining\")","            .font(.caption)","          Label(durationRemaining.formatted(.units()), systemImage: \"hourglass.tophalf.fill\")","            .font(.body.monospacedDigit())","            .labelStyle(.trailingIcon)","        }","      }","    }","    .padding([.top, .horizontal])","  }","","  private var totalDuration: Duration {","    .seconds(secondsElapsed) + durationRemaining","  }","","  private var progress: Double {","    guard totalDuration > .seconds(0) else { return 0 }","    return Double(secondsElapsed) \/ Double(totalDuration.components.seconds)","  }","}","","struct MeetingProgressViewStyle: ProgressViewStyle {","  var theme: Theme","","  func makeBody(configuration: Configuration) -> some View {","    ZStack {","      RoundedRectangle(cornerRadius: 10)","        .fill(theme.accentColor)","        .frame(height: 20)","","      ProgressView(configuration)","        .tint(theme.mainColor)","        .frame(height: 12)","        .padding(.horizontal)","    }","  }","}","","struct MeetingTimerView: View {","  let syncUp: SyncUp","  let speakerIndex: Int","","  var body: some View {","    Circle()","      .strokeBorder(lineWidth: 24)","      .overlay {","        VStack {","          Group {","            if speakerIndex < syncUp.attendees.count {","              Text(syncUp.attendees[speakerIndex].name)","            } else {","              Text(\"Someone\")","            }","          }","          .font(.title)","          Text(\"is speaking\")","          Image(systemName: \"mic.fill\")","            .font(.largeTitle)","            .padding(.top)","        }","        .foregroundStyle(syncUp.theme.accentColor)","      }","      .overlay {","        ForEach(Array(syncUp.attendees.enumerated()), id: \\.element.id) { index, attendee in","          if index < speakerIndex + 1 {","            SpeakerArc(totalSpeakers: syncUp.attendees.count, speakerIndex: index)","              .rotation(Angle(degrees: -90))","              .stroke(syncUp.theme.mainColor, lineWidth: 12)","          }","        }","      }","      .padding(.horizontal)","  }","}","","struct SpeakerArc: Shape {","  let totalSpeakers: Int","  let speakerIndex: Int","","  func path(in rect: CGRect) -> Path {","    let diameter = min(rect.size.width, rect.size.height) - 24","    let radius = diameter \/ 2","    let center = CGPoint(x: rect.midX, y: rect.midY)","    return Path { path in","      path.addArc(","        center: center,","        radius: radius,","        startAngle: startAngle,","        endAngle: endAngle,","        clockwise: false","      )","    }","  }","","  private var degreesPerSpeaker: Double {","    360 \/ Double(totalSpeakers)","  }","  private var startAngle: Angle {","    Angle(degrees: degreesPerSpeaker * Double(speakerIndex) + 1)","  }","  private var endAngle: Angle {","    Angle(degrees: startAngle.degrees + degreesPerSpeaker - 1)","  }","}","","struct MeetingFooterView: View {","  let syncUp: SyncUp","  var nextButtonTapped: () -> Void","  let speakerIndex: Int","","  var body: some View {","    VStack {","      HStack {","        if speakerIndex < syncUp.attendees.count - 1 {","          Text(\"Speaker \\(speakerIndex + 1) of \\(syncUp.attendees.count)\")","        } else {","          Text(\"No more speakers.\")","        }","        Spacer()","        Button(action: nextButtonTapped) {","          Image(systemName: \"forward.fill\")","        }","      }","    }","    .padding([.bottom, .horizontal])","  }","}","","#Preview {","  NavigationStack {","    RecordMeetingView(","      store: Store(initialState: RecordMeeting.State(syncUp: Shared(.mock))) {","        RecordMeeting()","      }","    )","  }","}"],"identifier":"ImplementingTimer-02-code-0002.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"title":"Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","url":"\/documentation\/composablearchitecture\/shared","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Shared","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Shared","kind":"identifier"}]}}}